{"id":"guide/deprecations","title":"Deprecated APIs and features","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/deprecations.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"deprecated-apis-and-features\" translation-result=\"on\">已弃用的 API 和特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-apis-and-features\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">Deprecated APIs and features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-apis-and-features\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">Angular 力图兼顾创新与稳定。但有时，API 和特性已经过时，需要进行删除或替换，以便 Angular 可以及时跟上新的最佳实践、依赖项变更或者 Web 平台自身的变化。</p><p translation-origin=\"off\">Angular strives to balance innovation and stability.\nSometimes, APIs and features become obsolete and need to be removed or replaced so that Angular can stay current with new best practices, changing dependencies, or changes in the (web) platform itself.</p>\n\n<p translation-result=\"on\">为了使这些转换尽可能简单，API 和特性在被删除之前会被弃用一段时间。这让你有时间将应用程序更新到最新的 API 和最佳实践。</p><p translation-origin=\"off\">To make these transitions as easy as possible, APIs and features are deprecated for a period of time before they are removed.\nThis gives you time to update your applications to the latest APIs and best practices.</p>\n\n<p translation-result=\"on\">本指南包含了当前已弃用的重要 Angular API 和特性的汇总表。参见<a href=\"https://github.com/angular/angular/blob/main/CHANGELOG.md\">完整的变更记录</a>来更全面地了解这些弃用的详情和重大变更。</p><p translation-origin=\"off\">This guide contains a summary of noteworthy Angular APIs and features that are currently deprecated.\nSee the <a href=\"https://github.com/angular/angular/blob/main/CHANGELOG.md\">full changelog</a> for\ncomprehensive details on deprecations and breaking changes.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">在 v6 或之前版本中弃用的功能和 API 可能会在版本 9 或任何后续主要版本中被移除。\n有关 Angular 弃用和移除做法的信息，请参见 <a href=\"guide/releases#deprecation-practices\" title=\"Angular Release Practices: Deprecation practices\">Angular 的版本与发布</a>。</p><p translation-origin=\"off\">Features and APIs that were deprecated in v6 or earlier are candidates for removal in version 9 or any later major version.\nFor information about Angular's deprecation and removal practices, see <a href=\"guide/releases#deprecation-practices\" title=\"Angular Release Practices: Deprecation practices\">Angular Release Practices</a>.</p>\n\n<p translation-result=\"on\">要了解如何逐步更新到最新版本的 Angular，请使用 <a href=\"https://update.angular.io\">update.angular.io</a> 上的交互式更新指南。</p><p translation-origin=\"off\">For step-by-step instructions on how to update to the latest Angular release, use the interactive update guide at <a href=\"https://update.angular.io\">update.angular.io</a>.</p>\n\n</div>\n<h2 id=\"index\" translation-result=\"on\">索引<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#index\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Index<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#index\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">为帮助你的项目面向未来，下表列出了所有已弃用的 API 和特性，并按它们将被移除的候选版本进行组织。每个项目都链接到本指南后面描述弃用原因和替换选项的部分。</p><p translation-origin=\"off\">To help you future-proof your projects, the following table lists all deprecated APIs and features, organized by the release in which they are candidates for removal.\nEach item is linked to the section later in this guide that describes the deprecation reason and replacement options.</p>\n\n<!--\ndeprecation -> removal cheat sheet\nv4 - v7\nv5 - v8\nv6 - v9\nv7 - v10\nv8 - v11\nv9 - v12\nv10 - v13\nv11 - v14\nv12 - v15\nv13 - v16\nv14 - v17\nv15 - v18\nv16 - v19\n-->\n<h3 id=\"deprecated-features-that-can-be-removed-in-v11-or-later\" translation-result=\"on\">可以在 v11 或更高版本中删除的已弃用特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v11-or-later\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deprecated features that can be removed in v11 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v11-or-later\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性区</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API 或特性</nt-wrapper><nt-wrapper translation-origin=\"off\">API or Feature</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已弃用于</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecated in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>DefaultIterableDiffer</code></a></td>\n<td align=\"left\">v7</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>defineInjectable</code></a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"api/core/NgModule\"><code>entryComponents</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>ANALYZE_FOR_ENTRY_COMPONENTS</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/forms</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#ngmodel-reactive\">与响应式表单一起使用的 <code>ngModel</code></a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#ngmodel-reactive\"><code>ngModel</code> with reactive forms</a></nt-wrapper></td>\n<td align=\"left\">v6</td>\n<td align=\"left\">v11</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/upgrade</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#upgrade\"><code>@angular/upgrade</code></a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/upgrade</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#upgrade-static\"><code>getAngularLib</code></a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/upgrade</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#upgrade-static\"><code>setAngularLib</code></a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">腻子脚本</nt-wrapper><nt-wrapper translation-origin=\"off\">polyfills</nt-wrapper></td>\n<td align=\"left\"><a href=\"guide/deprecations#reflect-metadata\">reflect-metadata</a></td>\n<td align=\"left\">v8</td>\n<td align=\"left\">v11</td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">模板语法</nt-wrapper><nt-wrapper translation-origin=\"off\">template syntax</nt-wrapper></td>\n<td align=\"left\"><a href=\"guide/deprecations#template-tag\"><code>&lt;template&gt;</code></a></td>\n<td align=\"left\">v7</td>\n<td align=\"left\">v11</td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v12-or-later\" translation-result=\"on\">可以在 v12 或更高版本中删除的已弃用特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v12-or-later\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deprecated features that can be removed in v12 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v12-or-later\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性区</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API 或特性</nt-wrapper><nt-wrapper translation-origin=\"off\">API or Feature</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已弃用于</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecated in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@angular/core/testing</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#testing\"><code>TestBed.get</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">v12</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core/testing</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#testing\"><code>async</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">v12</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v14-or-later\" translation-result=\"on\">可以在 v14 或更高版本中删除的已弃用特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v14-or-later\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deprecated features that can be removed in v14 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v14-or-later\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性区</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API 或特性</nt-wrapper><nt-wrapper translation-origin=\"off\">API or Feature</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已弃用于</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecated in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@angular/forms</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/forms/FormBuilder#group\"><code>FormBuilder.group</code> 旧版 options 参数</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/forms/FormBuilder#group\"><code>FormBuilder.group</code> legacy options parameter</a></nt-wrapper></td>\n<td align=\"left\">v11</td>\n<td align=\"left\">v14</td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v15-or-later\" translation-result=\"on\">可以在 v15 或更高版本中删除的已弃用特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v15-or-later\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deprecated features that can be removed in v15 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v15-or-later\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性区</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API 或特性</nt-wrapper><nt-wrapper translation-origin=\"off\">API or Feature</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已弃用于</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecated in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@angular/compiler-cli</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#input-setter-coercion\">输入属性 Setter 类型转换</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#input-setter-coercion\">Input setter coercion</a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/compiler-cli</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#full-template-type-check\"><code>fullTemplateTypeCheck</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#core\"><code>ApplicationRef.bootstrap</code> 的基于工厂的签名</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#core\">Factory-based signature of <code>ApplicationRef.bootstrap</code></a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>PlatformRef.bootstrapModuleFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/core/ViewContainerRef#createComponent\"><code>ViewContainerRef.createComponent</code> 的基于工厂的签名</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/core/ViewContainerRef#createComponent\">Factory-based signature of <code>ViewContainerRef.createComponent</code></a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/upgrade</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#upgrade-static\"><code>downgradeModule</code> 的基于工厂的签名</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#upgrade-static\">Factory-based signature of <code>downgradeModule</code></a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">模板语法</nt-wrapper><nt-wrapper translation-origin=\"off\">template syntax</nt-wrapper></td>\n<td align=\"left\"><a href=\"guide/deprecations#bind-syntax\"><code>bind-</code>, <code>on-</code>, <code>bindon-</code>, and <code>ref-</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v15</td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v16-or-later\" translation-result=\"on\">可以在 v16 或更高版本中删除的已弃用特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v16-or-later\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deprecated features that can be removed in v16 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v16-or-later\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性区</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API 或特性</nt-wrapper><nt-wrapper translation-origin=\"off\">API or Feature</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已弃用于</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecated in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#testrequest-errorevent\"><code>TestRequest</code> 接受 <code>ErrorEvent</code> 进行错误模拟</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#testrequest-errorevent\"><code>TestRequest</code> accepting <code>ErrorEvent</code> for error simulation</a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>getModuleFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>ModuleWithComponentFactories</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>Compiler</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>CompilerFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>NgModuleFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>ComponentFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>ComponentFactoryResolver</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#core\"><code>CompilerOptions.useJit and CompilerOptions.missingTranslation config options</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser-dynamic</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#platform-browser-dynamic\"><code>JitCompilerFactory</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser-dynamic</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#platform-browser-dynamic\"><code>RESOURCE_CACHE_PROVIDER</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-server</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#platform-server\"><code>ServerTransferStateModule</code></a></td>\n<td align=\"left\">v14</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/service-worker</code></td>\n<td align=\"left\"><a href=\"api/service-worker/SwUpdate#activated\"><code>SwUpdate#activated</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/service-worker</code></td>\n<td align=\"left\"><a href=\"api/service-worker/SwUpdate#available\"><code>SwUpdate#available</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\">v16</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v17-or-later\" translation-result=\"on\">可以在 v17 或更高版本中删除的已弃用特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v17-or-later\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deprecated features that can be removed in v17 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v17-or-later\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性区</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API 或特性</nt-wrapper><nt-wrapper translation-origin=\"off\">API or Feature</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已弃用于</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecated in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@angular/common</code></td>\n<td align=\"left\"><a href=\"guide/deprecations#common\"><code>NgComponentOutlet.ngComponentOutletNgModuleFactory</code></a></td>\n<td align=\"left\">v14</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/common</code></td>\n<td align=\"left\"><a href=\"api/common/DATE_PIPE_DEFAULT_TIMEZONE\"><code>DatePipe</code> - <code>DATE_PIPE_DEFAULT_TIMEZONE</code></a></td>\n<td align=\"left\">v15</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">用于 <a href=\"guide/deprecations#core\"><code>providedIn</code></a> 中的 NgModule 和 <code>'any'</code> 选项</nt-wrapper><nt-wrapper translation-origin=\"off\">NgModule and <code>'any'</code> options for <a href=\"guide/deprecations#core\"><code>providedIn</code></a></nt-wrapper></td>\n<td align=\"left\">v15</td>\n<td align=\"left\">v17</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><a href=\"api/core/Component#moduleId\"><code>@Component.moduleId</code></a></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v17</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#router\"><code>RouterLinkWithHref</code> 指令</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#router\"><code>RouterLinkWithHref</code> directive</a></nt-wrapper></td>\n<td align=\"left\">v15</td>\n<td align=\"left\">v17</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#router-writable-properties\">路由器可写属性</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#router-writable-properties\">Router writeable properties</a></nt-wrapper></td>\n<td align=\"left\">v15.1</td>\n<td align=\"left\">v17</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#router-can-load\">路由器 CanLoad 守卫</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#router-can-load\">Router CanLoad guards</a></nt-wrapper></td>\n<td align=\"left\">v15.1</td>\n<td align=\"left\">v17</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#router-class-and-injection-token-guards\">类和 <code>InjectionToken</code> 守卫和解析器</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#router-class-and-injection-token-guards\">class and <code>InjectionToken</code> guards and resolvers</a></nt-wrapper></td>\n<td align=\"left\">v15.2</td>\n<td align=\"left\">v17</td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"deprecated-features-that-can-be-removed-in-v18-or-later\" translation-result=\"on\">将会在 v18 或更高版本中删除的已弃用功能<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v18-or-later\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deprecated features that can be removed in v18 or later<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-that-can-be-removed-in-v18-or-later\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性区</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API 或特性</nt-wrapper><nt-wrapper translation-origin=\"off\">API or Feature</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已弃用于</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecated in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@angular/common</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/common/isPlatformWorkerApp\" class=\"code-anchor\">isPlatformWorkerApp</a></code> 和 <code><a href=\"api/common/isPlatformWorkerUi\" class=\"code-anchor\">isPlatformWorkerUi</a></code></nt-wrapper><nt-wrapper translation-origin=\"off\"><code><a href=\"api/common/isPlatformWorkerApp\" class=\"code-anchor\">isPlatformWorkerApp</a></code> and <code><a href=\"api/common/isPlatformWorkerUi\" class=\"code-anchor\">isPlatformWorkerUi</a></code></nt-wrapper></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/core</code></td>\n<td align=\"left\"><code>EnvironmentInjector.runInContext</code></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-server</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/platform-server/PlatformConfig\"><code>PlatformConfig.baseUrl</code> 和 <code>PlatformConfig.useAbsoluteUrl</code> 配置选项</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/platform-server/PlatformConfig\"><code>PlatformConfig.baseUrl</code> and <code>PlatformConfig.useAbsoluteUrl</code> config options</a></nt-wrapper></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>@angular/platform-server</code></td>\n<td align=\"left\"><a href=\"api/platform-server/platformDynamicServer\"><code>platformDynamicServer</code></a></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser</code></td>\n<td align=\"left\"><a href=\"api/platform-browser/BrowserModule#withservertransition\"><code>BrowserModule.withServerTransition</code></a></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n<tr>\n<td align=\"left\"><code>@angular/platform-browser</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#platform-browser\"><code>makeStateKey</code>，<code>StateKey</code> 和 <code>TransferState</code></a>，符号被移动到 <code>@angular/core</code></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#platform-browser\"><code>makeStateKey</code>, <code>StateKey</code> and <code>TransferState</code></a>, symbols were moved to <code>@angular/core</code></nt-wrapper></td>\n<td align=\"left\">v16</td>\n<td align=\"left\">v18</td>\n</tr>\n\n</tbody>\n</table>\n<h3 id=\"deprecated-features-with-no-planned-removal-version\" translation-result=\"on\">没有计划删除版本的过时特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-with-no-planned-removal-version\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Deprecated features with no planned removal version<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features-with-no-planned-removal-version\"><i class=\"material-icons\">link</i></a></h3>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">特性区</nt-wrapper><nt-wrapper translation-origin=\"off\">Area</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API 或特性</nt-wrapper><nt-wrapper translation-origin=\"off\">API or Feature</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已弃用于</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecated in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">模板语法</nt-wrapper><nt-wrapper translation-origin=\"off\">template syntax</nt-wrapper></td>\n<td align=\"left\"><a href=\"guide/deprecations#deep-component-style-selector\"><code>/deep/</code>, <code>&gt;&gt;&gt;</code>, and <code>::ng-deep</code></a></td>\n<td align=\"left\">v7</td>\n<td align=\"left\">unspecified</td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">有关 Angular 组件开发工具包（CDK）和 Angular Material 弃用的信息，请参阅<a href=\"https://github.com/angular/components/blob/main/CHANGELOG.md\">更改日志</a>。</p><p translation-origin=\"off\">For information about Angular Component Development Kit (CDK) and Angular Material deprecations, see the <a href=\"https://github.com/angular/components/blob/main/CHANGELOG.md\">changelog</a>.</p>\n\n<h2 id=\"deprecated-apis\" translation-result=\"on\">已弃用的 API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-apis\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Deprecated APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-apis\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节包含所有已弃用的 API 的完整列表，以及可帮助你计划迁移到替代方案的详细信息。</p><p translation-origin=\"off\">This section contains a complete list all deprecated APIs, with details to help you plan your migration to a replacement.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>提示</strong>：<br>\n在本站点的 <a href=\"api\">API 参考文档</a> 部分，已弃用的 API 会以 <del>删除线</del> 的形式标示出来。你可以通过<a href=\"api?status=deprecated\">状态：已弃用</a>来筛选 API 列表。</p><p translation-origin=\"off\"><strong>TIP</strong>: <br>\nIn the <a href=\"api\">API reference section</a> of this site, deprecated APIs are indicated by <del>strikethrough.</del> You can filter the API list by <a href=\"api?status=deprecated\">Status: deprecated</a>.</p>\n\n</div>\n<p><a id=\"common\"></a></p>\n<h3 id=\"angularcommon\">@angular/common<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularcommon\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/common/NgComponentOutlet\"><code>NgComponentOutlet.ngComponentOutletNgModuleFactory</code></a></td>\n<td align=\"left\"><code><a href=\"api/common/NgComponentOutlet#ngComponentOutletNgModule\" class=\"code-anchor\">NgComponentOutlet.ngComponentOutletNgModule</a></code></td>\n<td align=\"left\">v14</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">改用 <code>ngComponentOutletNgModule</code> 输入。此输入不需要解析 NgModule 工厂。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use the <code>ngComponentOutletNgModule</code> input instead. This input doesn't require resolving NgModule factory.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/common/DATE_PIPE_DEFAULT_TIMEZONE\"><code>DatePipe</code> - <code>DATE_PIPE_DEFAULT_TIMEZONE</code></a></td>\n<td align=\"left\"><code>{ provide: <a href=\"api/common/DATE_PIPE_DEFAULT_OPTIONS\" class=\"code-anchor\">DATE_PIPE_DEFAULT_OPTIONS</a>, useValue: { timezone: '-1200' }</code></td>\n<td align=\"left\">v15</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用 <code><a href=\"api/common/DATE_PIPE_DEFAULT_OPTIONS\" class=\"code-anchor\">DATE_PIPE_DEFAULT_OPTIONS</a></code> 注入令牌，它可以改为一次配置多个设置。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use the <code><a href=\"api/common/DATE_PIPE_DEFAULT_OPTIONS\" class=\"code-anchor\">DATE_PIPE_DEFAULT_OPTIONS</a></code> injection token, which can configure multiple settings at once instead.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/common/isPlatformWorkerApp\" class=\"code-anchor\">isPlatformWorkerApp</a></code> 和 <code><a href=\"api/common/isPlatformWorkerUi\" class=\"code-anchor\">isPlatformWorkerUi</a></code></nt-wrapper><nt-wrapper translation-origin=\"off\"><code><a href=\"api/common/isPlatformWorkerApp\" class=\"code-anchor\">isPlatformWorkerApp</a></code> and <code><a href=\"api/common/isPlatformWorkerUi\" class=\"code-anchor\">isPlatformWorkerUi</a></code></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">None</nt-wrapper></td>\n<td align=\"left\">v16</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">这两个函数在移除 webworker 平台后就没有用了（它们只返回 <code>false</code> ）。它们可以安全地移除。</nt-wrapper><nt-wrapper translation-origin=\"off\">These two functions have no purpose since the removal of the webworker platform (they only return <code>false</code>). They can be safely removed.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"core\"></a></p>\n<h3 id=\"angularcore\">@angular/core<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularcore\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/DefaultIterableDiffer\"><code>DefaultIterableDiffer</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">不适用</nt-wrapper><nt-wrapper translation-origin=\"off\">n/a</nt-wrapper></td>\n<td align=\"left\">v4</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">不再是公共 API。</nt-wrapper><nt-wrapper translation-origin=\"off\">Not part of public API.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/defineInjectable\"><code>defineInjectable</code></a></td>\n<td align=\"left\"><code>ɵɵ<a href=\"api/core/defineInjectable\" class=\"code-anchor\">defineInjectable</a></code></td>\n<td align=\"left\">v8</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">仅在生成的代码中使用。任何源代码都不应依赖此 API。</nt-wrapper><nt-wrapper translation-origin=\"off\">Used only in generated code. No source code should depend on this API.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/NgModule\"><code>entryComponents</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v9</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">参见 <a href=\"guide/deprecations#entryComponents\"><code>entryComponents</code></a></nt-wrapper><nt-wrapper translation-origin=\"off\">See <a href=\"guide/deprecations#entryComponents\"><code>entryComponents</code></a></nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>ANALYZE_FOR_ENTRY_COMPONENTS</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v9</td>\n<td align=\"left\">See <a href=\"guide/deprecations#entryComponents\"><code>ANALYZE_FOR_ENTRY_COMPONENTS</code></a></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/testing/async\"><code>async</code></a></td>\n<td align=\"left\"><a href=\"api/core/testing/waitForAsync\"><code>waitForAsync</code></a></td>\n<td align=\"left\">v11</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code>@angular/core/testing</code> 中的<a href=\"api/core/testing/async\"><code>async</code></a>函数已重命名为 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a></code>，以避免与原生 JavaScript <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 语法混淆。现有的函数已被弃用，可以在未来的版本中删除。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <a href=\"api/core/testing/async\"><code>async</code></a> function from <code>@angular/core/testing</code> has been renamed to <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a></code> in order to avoid confusion with the native JavaScript <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> syntax. The existing function is deprecated and can be removed in a future version.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/getModuleFactory\"><code>getModuleFactory</code></a></td>\n<td align=\"left\"><a href=\"api/core/getNgModuleById\"><code>getNgModuleById</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Ivy 允许直接使用 NgModule 类，而无需检索相应的工厂。</nt-wrapper><nt-wrapper translation-origin=\"off\">Ivy allows working with NgModule classes directly, without retrieving corresponding factories.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><code>ViewChildren.emitDistinctChangesOnly</code> / <code>ContentChildren.emitDistinctChangesOnly</code></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">无（是<a href=\"https://github.com/angular/angular/issues/40091\">问题 #40091</a>的一部分）</nt-wrapper><nt-wrapper translation-origin=\"off\">none (was part of <a href=\"https://github.com/angular/angular/issues/40091\">issue #40091</a>)</nt-wrapper></td>\n<td align=\"left\"></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">这是作为<a href=\"https://github.com/angular/angular/issues/40091\">问题 #40091</a>的错误修复的一部分引入的临时标志，将被删除。</nt-wrapper><nt-wrapper translation-origin=\"off\">This is a temporary flag introduced as part of bug fix of <a href=\"https://github.com/angular/angular/issues/40091\">issue #40091</a> and will be removed.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/core/ApplicationRef#bootstrap\"><code>ApplicationRef.bootstrap</code></a>的基于工厂的签名</nt-wrapper><nt-wrapper translation-origin=\"off\">Factory-based signature of <a href=\"api/core/ApplicationRef#bootstrap\"><code>ApplicationRef.bootstrap</code></a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/core/ApplicationRef#bootstrap\"><code>ApplicationRef.bootstrap</code></a>的基于类型的签名</nt-wrapper><nt-wrapper translation-origin=\"off\">Type-based signature of <a href=\"api/core/ApplicationRef#bootstrap\"><code>ApplicationRef.bootstrap</code></a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">有了 ivy，不需要解析 Component factory，直接提供 Component Type 即可。</nt-wrapper><nt-wrapper translation-origin=\"off\">With Ivy, there is no need to resolve Component factory and Component Type can be provided directly.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/PlatformRef#bootstrapModuleFactory\"><code>PlatformRef.bootstrapModuleFactory</code></a></td>\n<td align=\"left\"><a href=\"api/core/PlatformRef#bootstrapModule\"><code>PlatformRef.bootstrapModule</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">有了 ivy，就不需要解析 NgModule factory，直接提供 NgModule Type 即可。</nt-wrapper><nt-wrapper translation-origin=\"off\">With Ivy, there is no need to resolve NgModule factory and NgModule Type can be provided directly.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/ModuleWithComponentFactories\"><code>ModuleWithComponentFactories</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Ivy JIT 模式不需要访问此符号。有关其他上下文，参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API 更改</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Ivy JIT mode doesn't require accessing this symbol. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/Compiler\"><code>Compiler</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Ivy JIT 模式不需要访问此符号。有关其他上下文，参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API 更改</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Ivy JIT mode doesn't require accessing this symbol. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/CompilerFactory\"><code>CompilerFactory</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Ivy JIT 模式不需要访问此符号。有关其他上下文，参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API 更改</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Ivy JIT mode doesn't require accessing this symbol. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/NgModuleFactory\"><code>NgModuleFactory</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用不基于工厂的框架 API，例如 <a href=\"api/core/PlatformRef#bootstrapModule\">PlatformRef.bootstrapModule</a> 和 <a href=\"api/core/createNgModule\">createNgModule</a></nt-wrapper><nt-wrapper translation-origin=\"off\">Use non-factory based framework APIs like <a href=\"api/core/PlatformRef#bootstrapModule\">PlatformRef.bootstrapModule</a> and <a href=\"api/core/createNgModule\">createNgModule</a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Ivy JIT 模式不需要访问此符号。有关其他上下文，参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API 更改</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Ivy JIT mode doesn't require accessing this symbol. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/core/ViewContainerRef#createComponent\"><code>ViewContainerRef.createComponent</code> 的基于工厂的签名</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/core/ViewContainerRef#createComponent\">Factory-based signature of <code>ViewContainerRef.createComponent</code></a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/core/ViewContainerRef#createComponent\"><code>ViewContainerRef.createComponent</code> 的基于类型的签名</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/core/ViewContainerRef#createComponent\">Type-based signature of <code>ViewContainerRef.createComponent</code></a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Angular 不再需要组件工厂动态创建组件。使用 <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></code> 方法的不同签名，该方法允许直接传递 Component 类。</nt-wrapper><nt-wrapper translation-origin=\"off\">Angular no longer requires component factories to dynamically create components. Use different signature of the <code><a href=\"api/core/createComponent\" class=\"code-anchor\">createComponent</a></code> method, which allows passing Component class directly.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/ComponentFactory\"><code>ComponentFactory</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用不基于工厂的框架 API。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use non-factory based framework APIs.</nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">从 Ivy 开始，就不需要组件工厂。Angular 提供了其他可以直接使用组件类的 API。</nt-wrapper><nt-wrapper translation-origin=\"off\">Since Ivy, Component factories are not required. Angular provides other APIs where Component classes can be used directly.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/ComponentFactoryResolver\"><code>ComponentFactoryResolver</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用不基于工厂的框架 API。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use non-factory based framework APIs.</nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">由于 Ivy，不需要组件工厂，因此无需解析它们。</nt-wrapper><nt-wrapper translation-origin=\"off\">Since Ivy, Component factories are not required, thus there is no need to resolve them.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/CompilerOptions\"><code>CompilerOptions.useJit and CompilerOptions.missingTranslation config options</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">由于 Ivy，这些配置选项未使用，传递它们是没有效果的。</nt-wrapper><nt-wrapper translation-origin=\"off\">Since Ivy, those config options are unused, passing them has no effect.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用 NgModule 的 <a href=\"api/core/Injectable#providedIn\"><code>providedIn</code></a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/core/Injectable#providedIn\"><code>providedIn</code></a> with NgModule</nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">建议改用 <code>'root'</code> 提供者，如果必须使用，则使用 NgModule 中的 <code>providers</code> 来定义</nt-wrapper><nt-wrapper translation-origin=\"off\">Prefer <code>'root'</code> providers, or use NgModule <code>providers</code> if scoping to an NgModule is necessary</nt-wrapper></td>\n<td align=\"left\">v15</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/Injectable#providedIn\"><code>providedIn: 'any'</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v15</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">该选项具有容易混淆的语义，并且几乎没人用过。</nt-wrapper><nt-wrapper translation-origin=\"off\">This option has confusing semantics and nearly zero usage.</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/EnvironmentInjector#runInContext\"><code>EnvironmentInjector.runInContext</code></a></td>\n<td align=\"left\"><code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code></td>\n<td align=\"left\">v16</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code> 是一种更灵活的操作，它也支持元素注入器</nt-wrapper><nt-wrapper translation-origin=\"off\"><code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code> is a more flexible operation which supports element injectors as well</nt-wrapper></td>\n<td></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/Component#moduleId\"><code>@Component.moduleId</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v16</td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"testing\"></a></p>\n<h3 id=\"angularcoretesting\">@angular/core/testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularcoretesting\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/testing/TestBed#get\"><code>TestBed.get</code></a></td>\n<td align=\"left\"><a href=\"api/core/testing/TestBed#inject\"><code>TestBed.inject</code></a></td>\n<td align=\"left\">v9</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">行为没变，但类型安全。</nt-wrapper><nt-wrapper translation-origin=\"off\">Same behavior, but type safe.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/core/testing/async\"><code>async</code></a></td>\n<td align=\"left\"><a href=\"api/core/testing/waitForAsync\"><code>waitForAsync</code></a></td>\n<td align=\"left\">v10</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">行为相同，只是改名以免混淆。</nt-wrapper><nt-wrapper translation-origin=\"off\">Same behavior, but rename to avoid confusion.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"router\"></a></p>\n<h3 id=\"angularrouter\">@angular/router<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularrouter\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/router/RouterLinkWithHref\"><code>RouterLinkWithHref</code> 指令</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/router/RouterLinkWithHref\"><code>RouterLinkWithHref</code> directive</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">改用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> instead.</nt-wrapper></td>\n<td align=\"left\">v15</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">RouterLinkWithHref</a></code> 指令代码已合并到 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 中。现在，<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令可用于所有具有 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 属性的元素。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">RouterLinkWithHref</a></code> directive code was merged into <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>. Now the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive can be used for all elements that have <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/router/provideRoutes\"><code>provideRoutes</code> 函数</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/router/provideRoutes\"><code>provideRoutes</code> function</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">改用 <code><a href=\"api/router/ROUTES\" class=\"code-anchor\">ROUTES</a></code> <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use <code><a href=\"api/router/ROUTES\" class=\"code-anchor\">ROUTES</a></code> <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> instead.</nt-wrapper></td>\n<td align=\"left\">v15</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/router/provideRoutes\" class=\"code-anchor\">provideRoutes</a></code> 这个帮助器函数的用处很小，由于和 <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> 拼写相似，可能会无意间用错。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/router/provideRoutes\" class=\"code-anchor\">provideRoutes</a></code> helper function is minimally useful and can be unintentionally used instead of <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> due to similar spelling.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/router/testing/setupTestingRouter\"><code>setupTestingRouter</code> 函数</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/router/testing/setupTestingRouter\"><code>setupTestingRouter</code> function</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">请改用 <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> 或 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> or <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> instead.</nt-wrapper></td>\n<td align=\"left\">v15.1</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/router/testing/setupTestingRouter\" class=\"code-anchor\">setupTestingRouter</a></code> 函数不是必需的。<code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 根据测试中的 DI 配置进行初始化，就像在生产中一样。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/router/testing/setupTestingRouter\" class=\"code-anchor\">setupTestingRouter</a></code> function is not necessary. The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> is initialized based on the DI configuration in tests as it would be in production.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/router/DeprecatedGuard\">类和 <code>InjectionToken</code> 守卫和解析器</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/router/DeprecatedGuard\">class and <code>InjectionToken</code> guards and resolvers</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">请改用纯 JavaScript 函数。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use plain JavaScript functions instead.</nt-wrapper></td>\n<td align=\"left\">v15.2</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">函数式守卫比基于类和令牌的守卫更简单、更强大。</nt-wrapper><nt-wrapper translation-origin=\"off\">Functional guards are simpler and more powerful than class and token-based guards.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"platform-browser\"></a></p>\n<h3 id=\"angularplatform-browser\">@angular/platform-browser<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularplatform-browser\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/platform-browser/BrowserModule#withservertransition\"><code>BrowserModule.withServerTransition</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">无需更换。</nt-wrapper><nt-wrapper translation-origin=\"off\">No replacement needed.</nt-wrapper></td>\n<td align=\"left\">v16.0</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">应该使用 <code><a href=\"api/core/APP_ID\" class=\"code-anchor\">APP_ID</a></code> 令牌来设置应用程序 ID。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/core/APP_ID\" class=\"code-anchor\">APP_ID</a></code>token should be used instead to set the application ID.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/core/makeStateKey\" class=\"code-anchor\">makeStateKey</a></code> , <code><a href=\"api/core/StateKey\" class=\"code-anchor\">StateKey</a></code> 和 <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code></nt-wrapper><nt-wrapper translation-origin=\"off\"><code><a href=\"api/core/makeStateKey\" class=\"code-anchor\">makeStateKey</a></code>, <code><a href=\"api/core/StateKey\" class=\"code-anchor\">StateKey</a></code> and <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">从 <code>@angular/core</code> 导入。</nt-wrapper><nt-wrapper translation-origin=\"off\">Import from <code>@angular/core</code>.</nt-wrapper></td>\n<td align=\"left\">v16.0</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">相同的行为，但从不同的包中导出。</nt-wrapper><nt-wrapper translation-origin=\"off\">Same behavior, but exported from a different package.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"platform-browser-dynamic\"></a></p>\n<h3 id=\"angularplatform-browser-dynamic\">@angular/platform-browser-dynamic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularplatform-browser-dynamic\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/platform-browser-dynamic/JitCompilerFactory\"><code>JitCompilerFactory</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">此符号不再需要。有关其他上下文，参阅<a href=\"guide/deprecations#jit-api-changes\">由于 ViewEngine 弃用导致的 JIT API 更改</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">This symbol is no longer necessary. See <a href=\"guide/deprecations#jit-api-changes\">JIT API changes due to ViewEngine deprecation</a> for additional context.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/platform-browser-dynamic/RESOURCE_CACHE_PROVIDER\"><code>RESOURCE_CACHE_PROVIDER</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">以前，在某些情况下，要使用 View Engine 测试 AOT 编译的组件，这是必要的，但从 Ivy 开始就不再是这样了。</nt-wrapper><nt-wrapper translation-origin=\"off\">This was previously necessary in some cases to test AOT-compiled components with View Engine, but is no longer since Ivy.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"platform-server\"></a></p>\n<h3 id=\"angularplatform-server\">@angular/platform-server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularplatform-server\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/platform-server/ServerTransferStateModule\"><code>ServerTransferStateModule</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">无需更换。</nt-wrapper><nt-wrapper translation-origin=\"off\">No replacement needed.</nt-wrapper></td>\n<td align=\"left\">v14.1</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">当已导入 <code><a href=\"api/platform-server/ServerModule\" class=\"code-anchor\">ServerModule</a></code> 或 使用 <code><a href=\"api/platform-server/renderApplication\" class=\"code-anchor\">renderApplication</a></code> 函数进行引导时，<code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code> 类无需导入额外的模块即在服务端渲染期间使用。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/core/TransferState\" class=\"code-anchor\">TransferState</a></code> class is available for injection without importing additional modules during server side rendering, when <code><a href=\"api/platform-server/ServerModule\" class=\"code-anchor\">ServerModule</a></code> is imported or <code><a href=\"api/platform-server/renderApplication\" class=\"code-anchor\">renderApplication</a></code> function is used for bootstrap.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/platform-server/PlatformConfig\"><code>PlatformConfig.baseUrl</code> and <code>PlatformConfig.useAbsoluteUrl</code> config options</a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n<td align=\"left\">v16</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">这段代码以前未曾用过。</nt-wrapper><nt-wrapper translation-origin=\"off\">This was previously unused.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/platform-server/platformDynamicServer\"><code>platformDynamicServer</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">导入 <code>@angular/compiler</code> 并用 <code><a href=\"api/platform-server/platformServer\" class=\"code-anchor\">platformServer</a></code> 代替用法。</nt-wrapper><nt-wrapper translation-origin=\"off\">Import <code>@angular/compiler</code> and replace the usage with <code><a href=\"api/platform-server/platformServer\" class=\"code-anchor\">platformServer</a></code> instead.</nt-wrapper></td>\n<td align=\"left\">v16</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">这样做是为了减少 AOT 构建的服务器包大小。</nt-wrapper><nt-wrapper translation-origin=\"off\">This is done to decrease the server bundle size for AOT builds.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"forms\"></a></p>\n<h3 id=\"angularforms\">@angular/forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularforms\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"guide/deprecations#ngmodel-reactive\">与响应式表单一起使用的 <code>ngModel</code></a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"guide/deprecations#ngmodel-reactive\"><code>ngModel</code> with reactive forms</a></nt-wrapper></td>\n<td align=\"left\"><a href=\"api/forms/FormControlDirective\"><code>FormControlDirective</code></a></td>\n<td align=\"left\">v6</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/forms/FormBuilder#group\"><code>FormBuilder.group</code> 旧版 options 参数</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/forms/FormBuilder#group\"><code>FormBuilder.group</code> legacy options parameter</a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/forms/AbstractControlOptions\"><code>AbstractControlOptions</code> 参数值</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/forms/AbstractControlOptions\"><code>AbstractControlOptions</code> parameter value</a></nt-wrapper></td>\n<td align=\"left\">v11</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">没了</nt-wrapper><nt-wrapper translation-origin=\"off\">none</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"service-worker\"></a></p>\n<h3 id=\"angularservice-worker\">@angular/service-worker<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularservice-worker\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/service-worker/SwUpdate#activated\"><code>SwUpdate#activated</code></a></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/service-worker/SwUpdate#activateUpdate\"><code>SwUpdate#activateUpdate()</code> 的返回值</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/service-worker/SwUpdate#activateUpdate\"><code>SwUpdate#activateUpdate()</code> return value</a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a>#activateUpdate()</code> 的返回值指示更新是否成功激活。</nt-wrapper><nt-wrapper translation-origin=\"off\">The return value of <code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a>#activateUpdate()</code> indicates whether an update was successfully activated.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/service-worker/SwUpdate#available\"><code>SwUpdate#available</code></a></td>\n<td align=\"left\"><a href=\"api/service-worker/SwUpdate#versionUpdates\"><code>SwUpdate#versionUpdates</code></a></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">可以通过过滤<a href=\"api/service-worker/SwUpdate#versionUpdates\"><code>SwUpdate#versionUpdates</code></a>上的 <code><a href=\"api/service-worker/VersionReadyEvent\" class=\"code-anchor\">VersionReadyEvent</a></code> 事件来重建 <code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a>#available</code> 的行为</nt-wrapper><nt-wrapper translation-origin=\"off\">The behavior of <code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a>#available</code> can be rebuilt by filtering for <code><a href=\"api/service-worker/VersionReadyEvent\" class=\"code-anchor\">VersionReadyEvent</a></code> events on <a href=\"api/service-worker/SwUpdate#versionUpdates\"><code>SwUpdate#versionUpdates</code></a></nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"upgrade\"></a></p>\n<h3 id=\"angularupgrade\">@angular/upgrade<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularupgrade\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/upgrade\">所有入口点</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/upgrade\">All entry points</a></nt-wrapper></td>\n<td align=\"left\"><a href=\"api/upgrade/static\"><code>@angular/upgrade/static</code></a></td>\n<td align=\"left\">v5</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">参阅<a href=\"guide/upgrade\">从 AngularJS 升级</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">See <a href=\"guide/upgrade\">Upgrading from AngularJS</a>.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"upgrade-static\"></a></p>\n<h3 id=\"angularupgradestatic\">@angular/upgrade/static<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angularupgradestatic\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">已宣布弃用</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecation announced</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><a href=\"api/upgrade/static/getAngularLib\"><code>getAngularLib</code></a></td>\n<td align=\"left\"><a href=\"api/upgrade/static/getAngularJSGlobal\"><code>getAngularJSGlobal</code></a></td>\n<td align=\"left\">v5</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">参阅<a href=\"guide/upgrade\">从 AngularJS 升级</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">See <a href=\"guide/upgrade\">Upgrading from AngularJS</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><a href=\"api/upgrade/static/setAngularLib\"><code>setAngularLib</code></a></td>\n<td align=\"left\"><a href=\"api/upgrade/static/setAngularJSGlobal\"><code>setAngularJSGlobal</code></a></td>\n<td align=\"left\">v5</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">参阅<a href=\"guide/upgrade\">从 AngularJS 升级</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">See <a href=\"guide/upgrade\">Upgrading from AngularJS</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/upgrade/static/downgradeModule\"><code>downgradeModule</code> 的基于工厂的签名</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/upgrade/static/downgradeModule\">Factory-based signature of <code>downgradeModule</code></a></nt-wrapper></td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><a href=\"api/upgrade/static/downgradeModule\"><code>downgradeModule</code> 的基于 NgModule 的签名</a></nt-wrapper><nt-wrapper translation-origin=\"off\"><a href=\"api/upgrade/static/downgradeModule\">NgModule-based signature of <code>downgradeModule</code></a></nt-wrapper></td>\n<td align=\"left\">v13</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\"><code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code> 支持更符合人体工程学的基于 NgModule 的 API（与基于 NgModule 工厂的 API 相比）。</nt-wrapper><nt-wrapper translation-origin=\"off\">The <code><a href=\"api/upgrade/static/downgradeModule\" class=\"code-anchor\">downgradeModule</a></code> supports more ergonomic NgModule-based API (versus NgModule factory based API).</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"deprecated-features\"></a></p>\n<h2 id=\"deprecated-features\" translation-result=\"on\">已弃用的特性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Deprecated features<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-features\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节列出了所有已弃用的特性，包括模板语法、配置选项以及“已弃用的<a href=\"guide/deprecations#deprecated-apis\">API</a> ”部分中未列出的任何其他弃用。它还包括已弃用的 API 使用场景或 API 组合，以扩充上面的信息。</p><p translation-origin=\"off\">This section lists all deprecated features, which includes template syntax, configuration options, and any other deprecations not listed in the <a href=\"guide/deprecations#deprecated-apis\">Deprecated APIs</a> section.\nIt also includes deprecated API usage scenarios or API combinations, to augment the information above.</p>\n\n<p><a id=\"wtf\"></a></p>\n<h3 id=\"web-tracing-framework-integration\" translation-result=\"on\">Web 跟踪框架集成<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#web-tracing-framework-integration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Web Tracing Framework integration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#web-tracing-framework-integration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 以前支持与<a href=\"https://google.github.io/tracing-framework\">Web 跟踪框架（WTF）</a>集成，以对 Angular 应用程序进行性能测试。此集成未经维护，现已失效。因此，该集成在 Angular 版本 8 中被弃用，并且由于没有任何现有使用的证据，因此在版本 9 中被删除。</p><p translation-origin=\"off\">Angular previously supported an integration with the <a href=\"https://google.github.io/tracing-framework\">Web Tracing Framework (WTF)</a> for performance testing of Angular applications.\nThis integration has not been maintained and is now defunct.\nAs a result, the integration was deprecated in Angular version 8, and due to no evidence of any existing usage, removed in version 9.</p>\n\n<p><a id=\"deep-component-style-selector\"></a></p>\n<h3 id=\"deep--and-ng-deep-component-style-selectors\" translation-result=\"on\"><code>/deep/</code> 、 <code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code> 组件样式选择器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deep--and-ng-deep-component-style-selectors\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>/deep/</code>, <code>&gt;&gt;&gt;</code>, and <code>::ng-deep</code> component style selectors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deep--and-ng-deep-component-style-selectors\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">不推荐使用 shadow-dom-piercing 后代组合器，并且正在<a href=\"https://developers.google.com/web/updates/2017/10/remove-shadow-piercing\">从主要浏览器和工具</a>中删除支持。因此，在 v4 中，已弃用 Angular 对 <code>/deep/</code> 、 <code>&gt;&gt;&gt;</code> 和 <code>::ng-deep</code> 的支持。在删除之前，首选 <code>::ng-deep</code>，因为它与这些工具具有更广泛的兼容性。</p><p translation-origin=\"off\">The shadow-dom-piercing descendant combinator is deprecated and support is being <a href=\"https://developers.google.com/web/updates/2017/10/remove-shadow-piercing\">removed from major browsers and tools</a>.\nAs such, in v4, Angular's support for <code>/deep/</code>, <code>&gt;&gt;&gt;</code>, and <code>::ng-deep</code> was deprecated.\nUntil removal, <code>::ng-deep</code> is preferred for broader compatibility with the tools.</p>\n\n<p translation-result=\"on\">有关更多信息，参阅组件样式指南中的<a href=\"guide/component-styles#deprecated-deep--and-ng-deep\" title=\"组件样式指南，已弃用 deep 和 ngdeep\">/deep/、&gt;&gt;&gt; 和 ::ng-deep</a>。</p><p translation-origin=\"off\">For more information, see <a href=\"guide/component-styles#deprecated-deep--and-ng-deep\" title=\"Component Styles guide, Deprecated deep and ngdeep\">/deep/, &gt;&gt;&gt;, and ::ng-deep</a> in the Component Styles guide.</p>\n\n<p><a id=\"bind-syntax\"></a></p>\n<h3 id=\"bind--on--bindon--and-ref--prefixes\" translation-result=\"on\"><code>bind-</code> 、 <code>on-</code> 、 <code>bindon-</code> 和 <code>ref-</code> 前缀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#bind--on--bindon--and-ref--prefixes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>bind-</code>, <code>on-</code>, <code>bindon-</code>, and <code>ref-</code> prefixes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#bind--on--bindon--and-ref--prefixes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">模板前缀 <code>bind-</code> 、 <code>on-</code> 、 <code>bindon-</code> 和 <code>ref-</code> 在 v13 中已被弃用。模板应该使用更广为人知的语法进行绑定和引用：</p><p translation-origin=\"off\">The template prefixes <code>bind-</code>, <code>on-</code>, <code>bindon-</code>, and <code>ref-</code> have been deprecated in v13.\nTemplates should use the more widely documented syntaxes for binding and references:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>[input]=\"value\"</code> 代替 <code>bind-input=\"value\"</code></p><p translation-origin=\"off\"><code>[input]=\"value\"</code> instead of <code>bind-input=\"value\"</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>[@<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>]=\"value\"</code> 代替 <code>bind-animate-trigger=\"value\"</code></p><p translation-origin=\"off\"><code>[@<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>]=\"value\"</code> instead of <code>bind-animate-trigger=\"value\"</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>(click)=\"onClick()\"</code> 代替 <code>on-click=\"onClick()\"</code></p><p translation-origin=\"off\"><code>(click)=\"onClick()\"</code> instead of <code>on-click=\"onClick()\"</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"value\"</code> 代替 <code>bindon-ngModel=\"value\"</code></p><p translation-origin=\"off\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"value\"</code> instead of <code>bindon-ngModel=\"value\"</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>#templateRef</code> 代替 <code>ref-templateRef</code></p><p translation-origin=\"off\"><code>#templateRef</code> instead of <code>ref-templateRef</code></p>\n\n</li>\n</ul>\n<p><a id=\"template-tag\"></a></p>\n<h3 id=\"template-tag\" translation-result=\"on\"><code>&lt;template&gt;</code> 标签<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#template-tag\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>&lt;template&gt;</code> tag<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#template-tag\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>&lt;template&gt;</code> 标签在 v4 中已被弃用，以避免与同名的 DOM 元素冲突（例如使用 Web 组件时）。改用 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code>。有关更多信息，请参阅<a href=\"guide/aot-compiler\">Ahead-of-Time 编译</a>指南。</p><p translation-origin=\"off\">The <code>&lt;template&gt;</code> tag was deprecated in v4 to avoid colliding with a DOM element of the same name (such as when using web components).\nUse <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> instead.\nFor more information, see the <a href=\"guide/aot-compiler\">Ahead-of-Time Compilation</a> guide.</p>\n\n<p><a id=\"ngmodel-reactive\"></a></p>\n<h3 id=\"ngmodel-with-reactive-forms\" translation-result=\"on\">和响应式表单一起使用 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#和响应式表单一起使用-ngmodel\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> with reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#ngmodel-with-reactive-forms\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 Angular v6 中已不推荐把 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 输入属性、<code>ngModelChange</code> 事件与响应式表单指令一起使用，并将在 Angular 的未来版本中删除。</p><p translation-origin=\"off\">Support for using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> input property and <code>ngModelChange</code> event with reactive form directives has been deprecated in Angular v6 and can be removed in a future version of Angular.</p>\n\n<p translation-result=\"on\">现在已经弃用：</p><p translation-origin=\"off\">Now deprecated:</p>\n\n<code-example path=\"deprecation-guide/src/app/app.component.html\" region=\"deprecated-example\">\n\n&lt;input [formControl]=\"control\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"value\"&gt;\n\n\n</code-example>\n<code-example path=\"deprecation-guide/src/app/app.component.ts\" region=\"deprecated-example\">\n\nthis.value = 'some value';\n\n\n</code-example>\n<p translation-result=\"on\">出于多种原因，此支持已被弃用。首先，开发人员发现这种模式令人困惑。似乎正在使用实际的 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 指令，但实际上它是响应式表单指令上名为 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的输入/输出属性，它模拟了该指令的一些行为，但又不完全一样。它允许获取和设置值并拦截值事件，但 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 的一些特性，比如使用 <code>ngModelOptions</code> 延迟更新或导出指令，不起作用。</p><p translation-origin=\"off\">This support was deprecated for several reasons.\nFirst, developers found this pattern confusing.\nIt seems like the actual <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive is being used, but in fact it's an input/output property named <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> on the reactive form directive that approximates some, but not all, of the directive's behavior.\nIt allows getting and setting a value and intercepting value events, but some  <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> features, such as delaying updates with<code>ngModelOptions</code> or exporting the directive, don't work.</p>\n\n<p translation-result=\"on\">另外，该模式混用了模板驱动和响应式这两种表单策略，这会妨碍我们获取任何一种策略的全部优点。在模板中设置值的方式，也违反了响应式表单所遵循的“模板无关”原则；反之，在类中添加 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>/<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 层也破坏了“在模板中定义表单”的约定。</p><p translation-origin=\"off\">In addition, this pattern mixes template-driven and reactive forms strategies, which prevents taking advantage of the full benefits of either strategy.\nSetting the value in the template violates the template-agnostic principles behind reactive forms, whereas adding a <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>/<code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> layer in the class removes the convenience of defining forms in the template.</p>\n\n<p translation-result=\"on\">要在删除支持之前更新你的代码，请决定是坚持使用响应式表单指令（以及使用响应式表单模式获取/设置值）或切换到模板驱动的指令。</p><p translation-origin=\"off\">To update your code before support is removed, decide whether to stick with reactive form directives (and get/set values using reactive forms patterns) or switch to template-driven directives.</p>\n\n<p translation-result=\"on\"><strong>之后</strong>（选择 1 - 使用响应式表单）：</p><p translation-origin=\"off\"><strong>After</strong> (choice 1 - use reactive forms):</p>\n\n<code-example path=\"deprecation-guide/src/app/app.component.html\" region=\"reactive-form-example\">\n\n&lt;input [formControl]=\"control\"&gt;\n\n\n</code-example>\n<code-example path=\"deprecation-guide/src/app/app.component.ts\" region=\"reactive-form-example\">\n\nthis.control.setValue('some value');\n\n\n</code-example>\n<p translation-result=\"on\"><strong>之后</strong>（选择 2 - 使用模板驱动表单）：</p><p translation-origin=\"off\"><strong>After</strong> (choice 2 - use template-driven forms):</p>\n\n<code-example path=\"deprecation-guide/src/app/app.component.html\" region=\"template-driven-form-example\">\n\n&lt;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"value\"&gt;\n\n\n</code-example>\n<code-example path=\"deprecation-guide/src/app/app.component.ts\" region=\"template-driven-form-example\">\n\nthis.value = 'some value';\n\n\n</code-example>\n<p translation-result=\"on\">默认情况下，当你使用此模式时，你会在开发模式下收到一次弃用警告。你可以选择通过在导入时配置 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> 来消除此警告：</p><p translation-origin=\"off\">By default, when you use this pattern, you get a deprecation warning once in dev mode.\nYou can choose to silence this warning by configuring <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code> at import time:</p>\n\n<code-example path=\"deprecation-guide/src/app/app.module.ts\" region=\"reactive-form-no-warning\">\nimports: [\n  ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'})\n],\n\n</code-example>\n<p translation-result=\"on\">或者，你可以选择为该模式的每个实例显示一个单独的警告，配置值为 <code>\"always\"</code>。这可能有助于在更新代码时跟踪代码中使用模式的位置。</p><p translation-origin=\"off\">Alternatively, you can choose to surface a separate warning for each instance of this pattern with a configuration value of <code>\"always\"</code>.\nThis may help to track down where in the code the pattern is being used as the code is being updated.</p>\n\n<p><a id=\"router-class-and-injection-token-guards\"></a></p>\n<h3 id=\"router-class-and-injectiontoken-guards-and-resolvers\" translation-result=\"on\">路由器类和 InjectionToken 守卫和解析器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#router-class-and-injectiontoken-guards-and-resolvers\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Router class and InjectionToken guards and resolvers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#router-class-and-injectiontoken-guards-and-resolvers\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">类和注入令牌守卫和解析器已弃用。现在 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 对象应该使用函数式风格的守卫和解析器。基于类的守卫可以通过使用 <code>inject</code> 来获取依赖项来转换为函数。</p><p translation-origin=\"off\">Class and injection token guards and resolvers are deprecated. Instead, <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>\nobjects should use functional-style guards and resolvers. Class-based guards can\nbe converted to functions by instead using <code>inject</code> to get dependencies.</p>\n\n<p translation-result=\"on\">为了测试函数式 <code>canActivate</code> 守卫，建议使用 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 和 <code>TestBed.runInInjectionContext</code>。可以通过 DI 使用 <code>{provide: X, useValue: StubX}</code> 来提供测试模拟和存根。函数式守卫也可以用 <code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code> 以可测试的方式或通过传递依赖项的模拟实现来编写。例如：</p><p translation-origin=\"off\">For testing a function <code>canActivate</code> guard, using <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> and <code>TestBed.runInInjectionContext</code> is recommended.\nTest mocks and stubs can be provided through DI with <code>{provide: X, useValue: StubX}</code>.\nFunctional guards can also be written in a way that's either testable with\n<code><a href=\"api/core/runInInjectionContext\" class=\"code-anchor\">runInInjectionContext</a></code> or by passing mock implementations of dependencies.\nFor example:</p>\n\n<code-example>\nexport function myGuardWithMockableDeps(\n  dep1 = inject(MyService),\n  dep2 = inject(MyService2),\n  dep3 = inject(MyService3),\n) { }\n\nconst route = {\n  path: 'admin',\n  canActivate: [myGuardWithMockableDeps]\n}\n</code-example>\n<p translation-result=\"on\">此弃用仅影响 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 定义中对类和 <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> 守卫的支持。<code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> 类和 <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> 提供者在通常意义上<strong>并没有</strong>被弃用。也就是说，像 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 、 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code> 等接口将在 Angular 的未来版本中删除。只需从可注入类中删除 <code>implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> 并将路由定义更新为类似 <code>canActivate: [() =&gt; inject(MyGuard).canActivate()]</code> 就足以消除弃用警告。</p><p translation-origin=\"off\">This deprecation only affects the support for class and\n<code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> guards at the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> definition. <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> classes\nand <code><a href=\"api/core/InjectionToken\" class=\"code-anchor\">InjectionToken</a></code> providers are <em>not</em> deprecated in the general\nsense. That said, the interfaces like <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code>,\n<code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a></code>, etc. will be deleted in a future release of Angular. Simply removing the\n<code>implements <a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a></code> from the injectable class and updating the route definition\nto be a function like <code>canActivate: [() =&gt; inject(MyGuard).canActivate()]</code> is sufficient\nto get rid of the deprecation warning.</p>\n\n<p translation-result=\"on\">函数式守卫足够健壮，甚至可以通过转换来支持现有的基于类的守卫：</p><p translation-origin=\"off\">Functional guards are robust enough to even support the existing\nclass-based guards through a transform:</p>\n\n<code-example>\nimport {<a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a>} from '@angular/router';\n\nfunction <a href=\"api/router/mapToCanMatch\" class=\"code-anchor\">mapToCanMatch</a>(providers: Array&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;{canMatch: <a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a>}&gt;&gt;): <a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a>[] {\n  return providers.map(provider =&gt; (...params) =&gt; inject(provider).canMatch(...params));\n}\nconst route = {\n  path: 'admin',\n  canMatch: <a href=\"api/router/mapToCanMatch\" class=\"code-anchor\">mapToCanMatch</a>([AdminGuard]),\n};\n</code-example>\n<p translation-result=\"on\">也就是说守卫可以继续作为类实现，然后在路由定义处转为函数。</p><p translation-origin=\"off\">That is to say that guards can continue to be implemented as classes and then converted\nto functions at the route definition.</p>\n\n<p><a id=\"router-writable-properties\"></a></p>\n<h3 id=\"public-router-properties\" translation-result=\"on\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的公共属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#router-的公共属性\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Public <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#public-router-properties\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的所有公共属性都是不可写的。它们都应该使用其他方法进行配置，所有这些方法都有相应文档。</p><p translation-origin=\"off\">None of the public properties of the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> are meant to be writeable.\nThey should all be configured using other methods, all of which have been\ndocumented.</p>\n\n<p translation-result=\"on\">以下策略旨在通过根 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 或 <code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code> 中的 <code>providers</code> 在 DI 中注册应用程序策略来配置：</p><p translation-origin=\"off\">The following strategies are meant to be configured by registering the\napplication strategy in DI via the <code>providers</code> in the root <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> or\n<code><a href=\"api/platform-browser/bootstrapApplication\" class=\"code-anchor\">bootstrapApplication</a></code>:</p>\n\n<ul>\n<li><code>routeReuseStrategy</code></li>\n<li><code>titleStrategy</code></li>\n<li><code>urlHandlingStrategy</code></li>\n</ul>\n<p translation-result=\"on\">以下选项旨在使用 <code>RouterModule.forRoot</code> 或 <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> 和 <code><a href=\"api/router/withRouterConfig\" class=\"code-anchor\">withRouterConfig</a></code> 中可用的选项进行配置。</p><p translation-origin=\"off\">The following options are meant to be configured using the options\navailable in <code>RouterModule.forRoot</code> or <code><a href=\"api/router/provideRouter\" class=\"code-anchor\">provideRouter</a></code> and <code><a href=\"api/router/withRouterConfig\" class=\"code-anchor\">withRouterConfig</a></code>.</p>\n\n<ul>\n<li><code>onSameUrlNavigation</code></li>\n<li><code>paramsInheritanceStrategy</code></li>\n<li><code>urlUpdateStrategy</code></li>\n<li><code>canceledNavigationResolution</code></li>\n<li><code>errorHandler</code></li>\n</ul>\n<p translation-result=\"on\">以下选项已完全弃用：</p><p translation-origin=\"off\">The following options are deprecated in entirely:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>malformedUriErrorHandler</code> - URI 解析错误应该在 <code><a href=\"api/router/UrlSerializer\" class=\"code-anchor\">UrlSerializer</a></code> 中处理。</p><p translation-origin=\"off\"><code>malformedUriErrorHandler</code> - URI parsing errors should be handled in the <code><a href=\"api/router/UrlSerializer\" class=\"code-anchor\">UrlSerializer</a></code> instead.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>errorHandler</code> - 订阅 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 事件并过滤 <code><a href=\"api/router/NavigationError\" class=\"code-anchor\">NavigationError</a></code>。</p><p translation-origin=\"off\"><code>errorHandler</code> - Subscribe to the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> events and filter for <code><a href=\"api/router/NavigationError\" class=\"code-anchor\">NavigationError</a></code> instead.</p>\n\n</li>\n</ul>\n<p><a id=\"router-can-load\"></a></p>\n<h3 id=\"canload-guards\" translation-result=\"on\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#canload-守卫\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#canload-guards\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">路由器中的 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 守卫已弃用，取而代之的是 <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code>。这些守卫在导航的生命周期中同时执行。返回 <code>false</code> 的 <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code> 守卫将完全阻止 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 匹配，并且还会阻止加载 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 的子级。<code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code> 守卫可以实现与 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> 相同的目标，但允许导航在被拒绝时匹配其他路由（例如通配符路由）。公开 API 接口不需要同时拥有这两种类型的守卫。</p><p translation-origin=\"off\"><code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> guards in the Router are deprecated in favor of <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code>. These guards execute at the same time\nin the lifecycle of a navigation. A <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code> guard which returns false will prevent the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> from being\nmatched at all and also prevent loading the children of the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>. <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a></code> guards can accomplish the same\ngoals as <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a></code> but with the addition of allowing the navigation to match other routes when they reject\n(such as a wildcard route). There is no need to have both types of guards in the API surface.</p>\n\n<p><a id=\"loadChildren\"></a></p>\n<h3 id=\"loadchildren-string-syntax\" translation-result=\"on\"><code>loadChildren</code> 字符串语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#loadchildren-string-syntax\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>loadChildren</code> string syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#loadchildren-string-syntax\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当 Angular 第一次引入惰性路由时，还没有浏览器能支持动态加载额外的 JavaScript。因此 Angular 使用语法 <code>loadChildren: './lazy/lazy.module#LazyModule'</code> 并且还构建了一些工具来支持它。现在，很多浏览器都已支持 ECMAScript 的动态导入，Angular 也正朝着这个新语法前进。</p><p translation-origin=\"off\">When Angular first introduced lazy routes, there wasn't browser support for dynamically loading additional JavaScript.\nAngular created its own scheme using the syntax <code>loadChildren: './lazy/lazy.module#LazyModule'</code> and built tooling to support it.\nNow that ECMAScript dynamic import is supported in many browsers, Angular is moving toward this new syntax.</p>\n\n<p translation-result=\"on\">在版本 8 中，已弃用 <a href=\"api/router/LoadChildren\"><code>loadChildren</code></a> 路由规范的字符串语法，而是改用基于 <code>import()</code> 的新语法。</p><p translation-origin=\"off\">In version 8, the string syntax for the <a href=\"api/router/LoadChildren\"><code>loadChildren</code></a> route specification was deprecated, in favor of new syntax that uses <code>import()</code> syntax.</p>\n\n<p translation-result=\"on\"><strong>之前</strong>：</p><p translation-origin=\"off\"><strong>Before</strong>:</p>\n\n<code-example path=\"deprecation-guide/src/app/app.module.ts\" language=\"typescript\" region=\"lazyload-deprecated-syntax\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [{\n    path: 'lazy',\n    // The following string syntax for loadChildren is deprecated\n    loadChildren: './lazy/lazy.module#LazyModule',\n  }];\n\n</code-example>\n<p translation-result=\"on\"><strong>之后</strong>：</p><p translation-origin=\"off\"><strong>After</strong>:</p>\n\n<code-example path=\"deprecation-guide/src/app/app.module.ts\" language=\"typescript\" region=\"lazyload-syntax\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [{\n    path: 'lazy',\n    // The new import() syntax\n    loadChildren: () =&gt; import('./lazy/lazy.module').then(m =&gt; m.LazyModule)\n  }];\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>版本 8 更新</strong>：当你升级到版本 8 时，<a href=\"cli/update\"><code>ng update</code></a> 命令会自动执行转换。在版本 7 之前，<code>import()</code> 语法只能在 JIT 模式下（使用 View Engine）起作用。</p><p translation-origin=\"off\"><strong>Version 8 update</strong>: When you update to version 8, the <a href=\"cli/update\"><code>ng update</code></a> command performs the transformation automatically.\nPrior to version 7, the <code>import()</code> syntax only works in JIT mode (with view engine).</p>\n\n</div>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>声明语法</strong>：<br>\n对于 <code>ngc</code> 发现惰性加载的模块和相关的 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 来说，遵循路由声明语法 <code>loadChildren: () =&gt; import('...').then(m =&gt; m.ModuleName)</code> 是非常重要的。你可以在<a href=\"https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113\">这里</a>找到允许的语法结构的完整列表。这些限制会在 Ivy 正式发布后放宽，因为 Ivy 不再使用 <code>NgFactories</code>。</p><p translation-origin=\"off\"><strong>Declaration syntax</strong>: <br>\nIt's important to follow the route declaration syntax <code>loadChildren: () =&gt; import('...').then(m =&gt; m.ModuleName)</code> to allow <code>ngc</code> to discover the lazy-loaded module and the associated <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.\nYou can find the complete list of allowed syntax constructs <a href=\"https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113\">here</a>.\nThese restrictions will be relaxed with the release of Ivy since it'll no longer use <code>NgFactories</code>.</p>\n\n</div>\n<p><a id=\"reflect-metadata\"></a></p>\n<h3 id=\"dependency-on-a-reflect-metadata-polyfill-in-jit-mode\" translation-result=\"on\">JIT 模式下对反射元数据 polyfill 的依赖<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#dependency-on-a-reflect-metadata-polyfill-in-jit-mode\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Dependency on a reflect-metadata polyfill in JIT mode<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#dependency-on-a-reflect-metadata-polyfill-in-jit-mode\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 应用程序，特别是依赖于 JIT 编译器的应用程序，过去常常需要 <a href=\"https://github.com/rbuckton/reflect-metadata\">reflect-metadata</a> API 的腻子脚本。</p><p translation-origin=\"off\">Angular applications, and specifically applications that relied on the JIT compiler, used to require a polyfill for the <a href=\"https://github.com/rbuckton/reflect-metadata\">reflect-metadata</a> APIs.</p>\n\n<p translation-result=\"on\">在 Angular 8.0 版（<a href=\"https://github.com/angular/angular-cli/pull/14473\">见#14473</a>）中移除了对这个腻子脚本的需求，这将使得大多数 Angular 应用程序不再需要此腻子脚本。因为此腻子脚本可能被第三方库依赖，因此不能从所有 Angular 项目中删除它，我们从 8.0 版本开始弃用对这个腻子脚本的要求。这样可以给库作者和应用程序开发人员足够的时间来评估他们是否需要此腻子脚本，并执行任何必要的重构以消除对它的依赖。</p><p translation-origin=\"off\">The need for this polyfill was removed in Angular version 8.0 (<a href=\"https://github.com/angular/angular-cli/pull/14473\">see #14473</a>), rendering the presence of the polyfill in most Angular applications unnecessary.\nBecause the polyfill can be depended on by third-party libraries, instead of removing it from all Angular projects, we are deprecating the requirement for this polyfill as of version 8.0.\nThis should give library authors and application developers sufficient time to evaluate if they need the polyfill, and perform any refactoring necessary to remove the dependency on it.</p>\n\n<p translation-result=\"on\">在典型的 Angular 项目中，这个腻子脚本不用于生产版本，因此删除它不会影响生产环境的应用程序。删除它是为了从整体上上简化构建设置并减少外部依赖项的数量。</p><p translation-origin=\"off\">In a typical Angular project, the polyfill is not used in production builds, so removing it should not impact production applications.\nThe goal behind this removal is overall simplification of the build setup and decrease in the number of external dependencies.</p>\n\n<p><a id=\"static-query-resolution\"></a></p>\n<h3 id=\"viewchild--contentchild-static-resolution-as-the-default\" translation-result=\"on\"><code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>()</code> / <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>()</code> 默认使用静态解析<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#viewchild--contentchild-默认使用静态解析\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>@<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>()</code> / <code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>()</code> static resolution as the default<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#viewchild--contentchild-static-resolution-as-the-default\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">参阅<a href=\"guide/static-query-migration\">静态查询的专用迁移指南</a>。</p><p translation-origin=\"off\">See the <a href=\"guide/static-query-migration\">dedicated migration guide for static queries</a>.</p>\n\n<p><a id=\"contentchild-input-together\"></a></p>\n<h3 id=\"contentchild--input-used-together\" translation-result=\"on\"><code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>()</code> / <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#contentchild--input-一起使用\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>()</code> / <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> used together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#contentchild--input-used-together\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下模式已弃用：</p><p translation-origin=\"off\">The following pattern is deprecated:</p>\n\n<code-example path=\"deprecation-guide/src/app/app.component.ts\" language=\"typescript\" region=\"template-with-input-deprecated\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() @<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(<a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>) tpldeprecated !: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;;\n\n</code-example>\n<p translation-result=\"on\">不要再使用此模式，而应该将这两个装饰器分离到它们各自的属性中并添加回退逻辑，如下例所示：</p><p translation-origin=\"off\">Rather than using this pattern, separate the two decorators into their own\nproperties and add fallback logic as in the following example:</p>\n\n<code-example path=\"deprecation-guide/src/app/app.component.ts\" language=\"typescript\" region=\"template-with-input\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() tpl !: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;;\n@<a href=\"api/core/ContentChild\" class=\"code-anchor\">ContentChild</a>(<a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>) inlineTemplate !: <a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>&lt;any&gt;;\n\n</code-example>\n<p><a id=\"cant-assign-template-vars\"></a></p>\n<h3 id=\"cannot-assign-to-template-variables\" translation-result=\"on\">无法赋值给模板变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#cannot-assign-to-template-variables\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Cannot assign to template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#cannot-assign-to-template-variables\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在以下示例中，双向绑定意味着应在 <code>valueChange</code> 事件触发时写入 <code>optionName</code>。</p><p translation-origin=\"off\">In the following example, the two-way binding means that <code>optionName</code>\nshould be written when the <code>valueChange</code> event fires.</p>\n\n<code-example path=\"deprecation-guide/src/app/app.component.1.html\" region=\"two-way-template-deprecated\">\n&lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let optionName of options\" [(value)]=\"optionName\"&gt;&lt;/option&gt;\n\n</code-example>\n<p translation-result=\"on\">然而，在实践中，Angular 忽略了对模板变量的双向绑定。从版本 8 开始，不推荐对模板变量赋值。在未来的版本中，我们将抛出错误以指出不支持写入。</p><p translation-origin=\"off\">However, in practice, Angular ignores two-way bindings to template variables.\nStarting in version 8, attempting to write to template variables is deprecated.\nIn a future version, we will throw to indicate that the write is not supported.</p>\n\n<code-example path=\"deprecation-guide/src/app/app.component.html\" region=\"valid-template-bind\">\n&lt;option *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let optionName of options\" [value]=\"optionName\"&gt;&lt;/option&gt;\n\n</code-example>\n<p><a id=\"binding-to-innertext\"></a></p>\n<h3 id=\"binding-to-innertext-in-platform-server\" translation-result=\"on\">在 <code>platform-server</code> 中绑定到 <code>innerText</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#binding-to-innertext-in-platform-server\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Binding to <code>innerText</code> in <code>platform-server</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#binding-to-innertext-in-platform-server\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在服务端渲染中使用的 <a href=\"https://github.com/fgnass/domino\">Domino</a> 不支持 <code>innerText</code>，因此在平台服务器中的 “domino 适配器”中，如果尝试绑定到 <code>innerText</code>，则有一些特殊代码可以退回到 <code>textContent</code>。</p><p translation-origin=\"off\"><a href=\"https://github.com/fgnass/domino\">Domino</a>, which is used in server-side rendering, doesn't support <code>innerText</code>, so in platform-server's <em>domino adapter</em>, there was special code to fall back to <code>textContent</code> if you tried to bind to <code>innerText</code>.</p>\n\n<p translation-result=\"on\">这两个属性有细微的差别，因此在幕后切换到 <code>textContent</code> 可能会让用户感到惊讶。出于这个原因，我们弃用了这种行为。展望未来，用户应该在使用 Domino 时显式绑定到 <code>textContent</code>。</p><p translation-origin=\"off\">These two properties have subtle differences, so switching to <code>textContent</code> under the hood can be surprising to users.\nFor this reason, we are deprecating this behavior.\nGoing forward, users should explicitly bind to <code>textContent</code> when using Domino.</p>\n\n<p><a id=\"wtf-apis\"></a></p>\n<h3 id=\"wtfstarttimerange-and-all-wtf-apis\" translation-result=\"on\"><code>wtfStartTimeRange</code> 和所有 <code>wtf*</code> API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#wtfstarttimerange-and-all-wtf-apis\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>wtfStartTimeRange</code> and all <code>wtf*</code> APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#wtfstarttimerange-and-all-wtf-apis\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">所有 <code>wtf*</code> API 均已弃用，并将在未来版本中删除。</p><p translation-origin=\"off\">All of the <code>wtf*</code> APIs are deprecated and will be removed in a future version.</p>\n\n<p><a id=\"entryComponents\"></a></p>\n<h3 id=\"entrycomponents-and-analyze_for_entry_components-no-longer-required\" translation-result=\"on\">不再需要 <code>entryComponents</code> 和 <code>ANALYZE_FOR_ENTRY_COMPONENTS</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>entryComponents</code> and <code>ANALYZE_FOR_ENTRY_COMPONENTS</code> no longer required<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以前，<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 定义中的 <code>entryComponents</code> 数组用于告诉编译器将动态创建和插入哪些组件。使用 Ivy 后，这不再是必需的，并且可以从现有模块声明中删除 <code>entryComponents</code> 数组。这同样适用于 <code>ANALYZE_FOR_ENTRY_COMPONENTS</code> 注入令牌。</p><p translation-origin=\"off\">Previously, the <code>entryComponents</code> array in the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> definition was used to tell the compiler which components would be created and inserted dynamically.\nWith Ivy, this isn't a requirement anymore and the <code>entryComponents</code> array can be removed from existing module declarations.\nThe same applies to the <code>ANALYZE_FOR_ENTRY_COMPONENTS</code> injection token.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意：</strong><br>\n如果构建要供 View Engine 应用程序使用的库，则可能仍然需要保留这些。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nYou may still need to keep these if building a library that will be consumed by a View Engine application.</p>\n\n</div>\n<p><a id=\"moduleWithProviders\"></a></p>\n<h3 id=\"modulewithproviders-type-without-a-generic\" translation-result=\"on\">不带泛型的 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#不带泛型的-modulewithproviders-类型\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> type without a generic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#modulewithproviders-type-without-a-generic\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">一些 Angular 库，比如 <code>@angular/router</code> 和 <code>@ngrx/store</code>，实现的 API 返回名为 ModuleWithProviders 的类型（通常使用名为 <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> <code>forRoot()</code> 的方法）。这种类型代表一个 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 以及其他提供者。Angular 版本 9 已弃用没有明确泛型类型的 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> 类型。在 Angular 的未来版本中，泛型将不再是可选的。</p><p translation-origin=\"off\">Some Angular libraries, such as <code>@angular/router</code> and <code>@ngrx/store</code>, implement APIs that return a type called <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> (typically using a method named <code>forRoot()</code>).\nThis type represents an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> along with additional providers.\nAngular version 9 deprecates use of <code><a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a></code> without an explicitly generic type, where the generic type refers to the type of the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>.\nIn a future version of Angular, the generic will no longer be optional.</p>\n\n<p translation-result=\"on\">如果你使用的是 CLI，则 <code>ng update</code> 应该<a href=\"guide/migration-module-with-providers\">会自动迁移代码</a>。如果没有使用 CLI，则可以将任何缺失的泛型类型手动添加到应用程序中。比如：</p><p translation-origin=\"off\">If you're using the CLI, <code>ng update</code> should <a href=\"guide/migration-module-with-providers\">migrate your code automatically</a>.\nIf you're not using the CLI, you can add any missing generic types to your application manually.\nFor example:</p>\n\n<p translation-result=\"on\"><strong>之前</strong>：</p><p translation-origin=\"off\"><strong>Before</strong>:</p>\n\n<code-example path=\"deprecation-guide/src/app/app.module.ts\" language=\"typescript\" region=\"ModuleWithProvidersNonGeneric\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* ... */\n})\nexport class MyModule {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: SomeConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a> {\n    return {\n      ngModule: SomeModule,\n      providers: [\n        {provide: SomeConfig, useValue: config}\n      ]\n    };\n  }\n}\n\n</code-example>\n<p translation-result=\"on\"><strong>之后</strong>：</p><p translation-origin=\"off\"><strong>After</strong>:</p>\n\n<code-example path=\"deprecation-guide/src/app/app.module.ts\" language=\"typescript\" region=\"ModuleWithProvidersGeneric\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* ... */\n})\nexport class MyModule {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> forRoot(config: SomeConfig): <a href=\"api/core/ModuleWithProviders\" class=\"code-anchor\">ModuleWithProviders</a>&lt;SomeModule&gt; {\n    return {\n      ngModule: SomeModule,\n      providers: [\n        {provide: SomeConfig, useValue: config}\n      ]\n    };\n  }\n}\n\n</code-example>\n<!--\n\n### Internet Explorer 11\n\nAngular support for Microsoft's Internet Explorer 11 \\(IE11\\) is deprecated and will be removed in Angular v13.\nEnding IE11 support allows Angular to take advantage of web platform APIs present only in evergreen browsers, resulting in better APIs for developers and more capabilities for application users.\nAn additional motivation behind this removal is the drop in global usage of IE11 to just ~1% \\(as of March 2021\\).\nFor full rationale and discussion behind this deprecation, see [RFC: Internet Explorer 11 support deprecation and removal](https://github.com/angular/angular/issues/41840).\n\n<div class=\"alert is-helpful\">\n\n**NOTE**: <br />\nIE11 will be supported in Angular v12 LTS releases through November 2022.\n\n**注意**：<br />\nAngular v12 LTS 版本会支持 IE11，直到 2022 年 11 月为止。\n\n</div>\n\n-->\n<p><a id=\"input-setter-coercion\"></a></p>\n<h3 id=\"input-setter-coercion\" translation-result=\"on\">输入 setter 强制类型转换<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#input-setter-coercion\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Input setter coercion<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#input-setter-coercion\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">由于在 Angular 中引入了 <code>strictTemplates</code> 标志，编译器已经能够根据相应指令的声明输入类型对输入绑定进行类型检查。当 “getter/setter 对”用于输入时，可能需要让 setter 接受比 getter 返回的类型更宽泛的类型集，比如当 setter 首次转换输入值时。然而，在 TypeScript 4.3 之前，需要 getter/setter 对具有相同的类型，因此无法准确地声明此模式。</p><p translation-origin=\"off\">Since the <code>strictTemplates</code> flag has been introduced in Angular, the compiler has been able to type-check input bindings to the declared input type of the corresponding directive.\nWhen a getter/setter pair is used for the input, the setter might need to accept more types than the getter returns, such as when the setter first converts the input value.\nHowever, until TypeScript 4.3 a getter/setter pair was required to have identical types so this pattern could not be accurately declared.</p>\n\n<p translation-result=\"on\">为了减轻这种限制，可以在对输入绑定进行类型检查时用到的指令中声明<a href=\"guide/template-typecheck#input-setter-coercion\">输入 setter 强制类型转换字段</a>。但是，从 <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-3.html#separate-write-types-on-properties\">TypeScript 4.3</a> 开始，此限制已被移除； setter 现在可以接受比 getter 返回的类型更宽泛的类型。这意味着不再需要输入强制类型转换字段，因为它们的效果可以通过拓宽 setter 的类型来实现。</p><p translation-origin=\"off\">To mitigate this limitation, it was made possible to declare <a href=\"guide/template-typecheck#input-setter-coercion\">input setter coercion fields</a> in directives that are used when type-checking input bindings.\nHowever, since <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-3.html#separate-write-types-on-properties\">TypeScript 4.3</a> the limitation has been removed; setters can now accept a wider type than what is returned by the getter.\nThis means that input coercion fields are no longer needed, as their effects can be achieved by widening the type of the setter.</p>\n\n<p translation-result=\"on\">比如，以下指令：</p><p translation-origin=\"off\">For example, the following directive:</p>\n\n<code-example path=\"deprecation-guide/src/app/submit-button/submit-button.component.ts\" language=\"typescript\" region=\"submitButtonNarrow\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n})\nexport class SubmitButtonComponent {\n  <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> ngAcceptInputType_disabled: boolean|'';\n\n  private disabledValue = false;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n  get disabled(): boolean {\n    return this.disabledValue;\n  }\n  set disabled(value: boolean) {\n    this.disabledValue = (value === '') || value;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">可以重构如下：</p><p translation-origin=\"off\">can be refactored as follows:</p>\n\n<code-example path=\"deprecation-guide/src/app/submit-button/submit-button.component.ts\" language=\"typescript\" region=\"submitButton\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n})\nexport class SubmitButtonComponent {\n  private disabledValue = false;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n  get disabled(): boolean {\n    return this.disabledValue;\n  }\n\n  set disabled(value: boolean|'') {\n    this.disabledValue = (value === '') || value;\n  }\n}\n\n</code-example>\n<p><a id=\"full-template-type-check\"></a></p>\n<h3 id=\"fulltemplatetypecheck\"><code>fullTemplateTypeCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#fulltemplatetypecheck\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">使用 AOT 编译器编译你的应用程序时，你的模板会根据特定的严格级别进行类型检查。在 Angular 9 之前，<a href=\"guide/angular-compiler-options\"><code>fullTemplateTypeCheck</code> 编译器选项</a>只支持两个严格级别的模板类型检查。在版本 9 中引入了 <code>strictTemplates</code> 系列编译器选项，作为一种更细粒度的方法来配置模板的类型检查的严格程度。</p><p translation-origin=\"off\">When compiling your application using the AOT compiler, your templates are type-checked according to a certain strictness level.\nBefore Angular 9 there existed only two strictness levels of template type checking as determined by <a href=\"guide/angular-compiler-options\">the <code>fullTemplateTypeCheck</code> compiler option</a>.\nIn version 9 the <code>strictTemplates</code> family of compiler options has been introduced as a more fine-grained approach to configuring how strict your templates are being type-checked.</p>\n\n<p translation-result=\"on\"><code>fullTemplateTypeCheck</code> 标志已被弃用，取代它的是新的 <code>strictTemplates</code> 选项及其相关的编译器选项。当前已配置为 <code>fullTemplateTypeCheck: true</code> 的项目可以迁移到以下编译器选项集以实现相同级别的类型检查：</p><p translation-origin=\"off\">The <code>fullTemplateTypeCheck</code> flag is being deprecated in favor of the new <code>strictTemplates</code> option and its related compiler options.\nProjects that currently have <code>fullTemplateTypeCheck: true</code> configured can migrate to the following set of compiler options to achieve the same level of type-checking:</p>\n\n<code-example language=\"json\" header=\"tsconfig.app.json\">\n\n{\n  \"angularCompilerOptions\": {\n    …\n    \"strictTemplates\": true,\n    \"strictInputTypes\": false,\n    \"strictNullInputTypes\": false,\n    \"strictAttributeTypes\": false,\n    \"strictOutputEventTypes\": false,\n    \"strictDomEventTypes\": false,\n    \"strictDomLocalRefTypes\": false,\n    \"strictSafeNavigationTypes\": false,\n    \"strictContextGenerics\": false,\n    …\n  }\n}\n\n</code-example>\n<p><a id=\"jit-api-changes\"></a></p>\n<h2 id=\"jit-api-changes-due-to-viewengine-deprecation\" translation-result=\"on\">由于 ViewEngine 弃用而导致的 JIT API 更改<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#jit-api-changes-due-to-viewengine-deprecation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">JIT API changes due to ViewEngine deprecation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#jit-api-changes-due-to-viewengine-deprecation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 ViewEngine 中，<a href=\"/guide/glossary#jit\">JIT 编译</a>需要在应用程序中注入特殊的提供者（如 <code><a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a></code>、<code><a href=\"api/core/CompilerFactory\" class=\"code-anchor\">CompilerFactory</a></code> 等）并调用相应的方法。使用 Ivy，如果 Component、NgModule 等尚未进行 <a href=\"/guide/glossary#aot\">AOT 编译</a>，则 JIT 编译会隐式进行。这些特殊的提供者在 Ivy 中仍然可用，以便与 ViewEngine 向后兼容，从而使向 Ivy 的过渡更加顺畅。由于 ViewEngine 已被弃用并将很快被删除，因此这些符号现在也已被弃用。</p><p translation-origin=\"off\">In ViewEngine, <a href=\"/guide/glossary#jit\">JIT compilation</a> required special providers (such as <code><a href=\"api/core/Compiler\" class=\"code-anchor\">Compiler</a></code> or <code><a href=\"api/core/CompilerFactory\" class=\"code-anchor\">CompilerFactory</a></code>) to be injected in the app and corresponding methods to be invoked.\nWith Ivy, JIT compilation takes place implicitly if the Component, NgModule, etc. have not already been <a href=\"/guide/glossary#aot\">AOT compiled</a>.\nThose special providers were made available in Ivy for backwards-compatibility with ViewEngine to make the transition to Ivy smoother.\nSince ViewEngine is deprecated and will soon be removed, those symbols are now deprecated as well.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><strong>重要提示</strong>：<br>\n这个弃用并不影响使用 Ivy 的 JIT 模式（但我们仍在探索将来弃用 JIT 的可能性。请参见 <a href=\"https://github.com/angular/angular/issues/43133\">RFC: Exploration of use-cases for Angular JIT compilation mode</a>）。</p><p translation-origin=\"off\"><strong>IMPORTANT</strong>: <br>\nthis deprecation doesn't affect JIT mode in Ivy (JIT remains available with Ivy, however we are exploring a possibility of deprecating it in the future.\nSee <a href=\"https://github.com/angular/angular/issues/43133\">RFC: Exploration of use-cases for Angular JIT compilation mode</a>).</p>\n\n</div>\n<p><a id=\"testrequest-errorevent\"></a></p>\n<h3 id=\"testrequest-accepting-errorevent\" translation-result=\"on\"><code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> 接受 <code>ErrorEvent</code> 参数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#testrequest-接受-errorevent-参数\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> accepting <code>ErrorEvent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#testrequest-accepting-errorevent\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 提供了一些用于测试 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的实用工具。<code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code> 中的 <code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> 类会模拟 HTTP 请求对象以与 <code><a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a></code> 一起使用。</p><p translation-origin=\"off\">Angular provides utilities for testing <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>.\nThe <code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> class from <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code> mocks HTTP request objects for use with <code><a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a></code>.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> 提供了一个 API 来模拟带有错误的 HTTP 响应。在早期版本的 Angular 中，此 API 接受 <code>ErrorEvent</code> 类型的对象，这与浏览器原生返回的错误事件类型不匹配。如果你要将 <code>ErrorEvent</code> 与 <code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> 一起使用，就应该切换到 <code>ProgressEvent</code>。</p><p translation-origin=\"off\"><code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code> provides an API for simulating an HTTP response with an error.\nIn earlier versions of Angular, this API accepted objects of type <code>ErrorEvent</code>, which does not match the type of error event that browsers return natively.\nIf you use <code>ErrorEvent</code> with <code><a href=\"api/common/http/testing/TestRequest\" class=\"code-anchor\">TestRequest</a></code>, you should switch to <code>ProgressEvent</code>.</p>\n\n<p translation-result=\"on\">这是使用 <code>ProgressEvent</code> 的示例：</p><p translation-origin=\"off\">Here is an example using a <code>ProgressEvent</code>:</p>\n\n<code-example format=\"typescript\" language=\"typescript\">\n\nconst mockError = new ProgressEvent('error');\nconst mockRequest = httpTestingController.expectOne(..);\n\nmockRequest.error(mockError);\n\n</code-example>\n<p><a id=\"deprecated-cli-flags\"></a></p>\n<h2 id=\"deprecated-cli-apis-and-options\" translation-result=\"on\">弃用的 CLI API 和选项<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-cli-apis-and-options\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Deprecated CLI APIs and Options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#deprecated-cli-apis-and-options\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节包含所有当前已弃用的 CLI 标志的完整列表。</p><p translation-origin=\"off\">This section contains a complete list all of the currently deprecated CLI flags.</p>\n\n<h3 id=\"angular-devkitbuild-angular\">@angular-devkit/build-angular<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#angular-devkitbuild-angular\"><i class=\"material-icons\">link</i></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">API/选项</nt-wrapper><nt-wrapper translation-origin=\"off\">API/Option</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">可能会移除于</nt-wrapper><nt-wrapper translation-origin=\"off\">May be removed in</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>deployUrl</code></td>\n<td align=\"left\"><!--v13--> v15</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">使用 <code>baseHref</code> 选项、 <code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> DI 令牌或两者的组合。有关更多信息，参阅<a href=\"guide/deployment#the-deploy-url\">部署 url</a>。</nt-wrapper><nt-wrapper translation-origin=\"off\">Use <code>baseHref</code> option, <code><a href=\"api/common/APP_BASE_HREF\" class=\"code-anchor\">APP_BASE_HREF</a></code> DI token or a combination of both instead. For more information, see <a href=\"guide/deployment#the-deploy-url\">the deploy url</a>.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">Protractor 构建器</nt-wrapper><nt-wrapper translation-origin=\"off\">Protractor builder</nt-wrapper></td>\n<td align=\"left\"><!--v12--> v14</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">作为 Protractor 弃用的一部分而弃用。</nt-wrapper><nt-wrapper translation-origin=\"off\">Deprecate as part of the Protractor deprecation.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p><a id=\"removed\"></a></p>\n<h2 id=\"removed-apis\" translation-result=\"on\">删除的 API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#removed-apis\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Removed APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#removed-apis\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">从 11.0.0*开始，已经移除了以下 API：</p><p translation-origin=\"off\">The following APIs have been removed starting with version 11.0.0*:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">包</nt-wrapper><nt-wrapper translation-origin=\"off\">Package</nt-wrapper></th>\n<th align=\"left\">API</th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">替代品</nt-wrapper><nt-wrapper translation-origin=\"off\">Replacement</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><code>@angular/router</code></td>\n<td align=\"left\"><code>preserveQueryParams</code></td>\n<td align=\"left\"><a href=\"api/router/UrlCreationOptions#queryParamsHandling\"><code>queryParamsHandling</code></a></td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<p translation-result=\"on\">* 要查看版本 10 中移除的 API，请查看 <a href=\"https://v10.angular.cn/guide/deprecations#removed\">版本 10 文档站点</a>上的本指南。</p><p translation-origin=\"off\">* To see APIs removed in version 10, check out this guide on the <a href=\"https://v10.angular.io/guide/deprecations#removed\">version 10 docs site</a>.</p>\n\n<p><a id=\"style-sanitization\"></a></p>\n<h3 id=\"style-sanitization-for-style-and-styleprop-bindings\" translation-result=\"on\"><code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 和 <code>[style.prop]</code> 绑定的样式清理<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#style-和-styleprop-绑定的样式清理\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Style Sanitization for <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> and <code>[style.prop]</code> bindings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#style-sanitization-for-style-and-styleprop-bindings\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">Angular 会清理 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 和 <code>[style.prop]</code> 绑定，以防止恶意代码通过 CSS <code>url()</code> 条目中的 <code>javascript:</code> 表达式进行插入。但是，大多数现代浏览器都已不再支持这些表达式的使用，所以这种清理只对 IE 6 和 7 才有意义。鉴于 Angular 不支持 IE 6 或 7，并且这种清理有性能代价，因此我们将不再清理 Angular 版本 10 中的样式绑定。</p><p translation-origin=\"off\">Angular used to sanitize <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> and <code>[style.prop]</code> bindings to prevent malicious code from being inserted through <code>javascript:</code> expressions in CSS <code>url()</code> entries.\nHowever, most modern browsers no longer support the usage of these expressions, so sanitization was only maintained for the sake of IE 6 and 7.\nGiven that Angular does not support either IE 6 or 7 and sanitization has a performance cost, we will no longer sanitize style bindings as of version 10 of Angular.</p>\n\n<h3 id=\"loadchildren-string-syntax-in-angularrouter\" translation-result=\"on\"><code>@angular/router</code> 中的 <code>loadChildren</code> 字符串语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#loadchildren-string-syntax-in-angularrouter\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\"><code>loadChildren</code> string syntax in <code>@angular/router</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#loadchildren-string-syntax-in-angularrouter\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">不能再用 <code>loadChildren</code> 字符串语法来配置惰性路由。字符串语法已替换为动态导入语句。<code>DeprecatedLoadChildren</code> 类型已从 <code>@angular/router</code> 中删除。在 <a href=\"api/router/LoadChildrenCallback\"><code>LoadChildrenCallback</code> 文档</a>中查找有关本替换的更多信息。</p><p translation-origin=\"off\">It is no longer possible to use the <code>loadChildren</code> string syntax to configure lazy routes.\nThe string syntax has been replaced with dynamic import statements.\nThe <code>DeprecatedLoadChildren</code> type was removed from <code>@angular/router</code>.\nFind more information about the replacement in the <a href=\"api/router/LoadChildrenCallback\"><code>LoadChildrenCallback</code> documentation</a>.</p>\n\n<p translation-result=\"on\">支持类 <code>NgModuleFactoryLoader</code> 、 <code>SystemJsNgModuleLoader</code> 和 <code>SystemJsNgModuleLoaderConfig</code> 类已从 <code>@angular/core</code> 中删除，并且 <code>SpyNgModuleFactoryLoader</code> 已从 <code>@angular/router</code> 中删除。</p><p translation-origin=\"off\">The supporting classes <code>NgModuleFactoryLoader</code>, <code>SystemJsNgModuleLoader</code>, and <code>SystemJsNgModuleLoaderConfig</code> were removed from <code>@angular/core</code>, as well as <code>SpyNgModuleFactoryLoader</code> from <code>@angular/router</code>.</p>\n\n<h3 id=\"wrappedvalue\"><code>WrappedValue</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deprecations#wrappedvalue\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\"><code>WrappedValue</code> 是为了供变更检测用的，它允许将相同的对象实例视为不同的。在 <code>Observable</code> 产生相同值实例的情况下，它通常与 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道一起使用。</p><p translation-origin=\"off\">The purpose of <code>WrappedValue</code> was to allow the same object instance to be treated as different for the purposes of change detection.\nIt was commonly used with the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe in the case where the <code>Observable</code> produces the same instance of the value.</p>\n\n<p translation-result=\"on\">鉴于此用例相对较少且特殊处理会影响应用程序性能，<code>WrappedValue</code> API 已在 Angular 13 中删除。</p><p translation-origin=\"off\">Given that this use case is relatively rare and special handling impacted application performance, the <code>WrappedValue</code> API has been removed in Angular 13.</p>\n\n<p translation-result=\"on\">如果你依赖同一个对象实例应该引起变更检测的行为，你有两个选择：</p><p translation-origin=\"off\">If you rely on the behavior that the same object instance should cause change detection, you have two options:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">克隆结果值，使其具有新的标识。</p><p translation-origin=\"off\">Clone the resulting value so that it has a new identity</p>\n\n</li>\n<li>\n<p translation-result=\"on\">显式调用<a href=\"api/core/ChangeDetectorRef#detectchanges\"><code>ChangeDetectorRef.detectChanges()</code></a>以强制更新</p><p translation-origin=\"off\">Explicitly call <a href=\"api/core/ChangeDetectorRef#detectchanges\"><code>ChangeDetectorRef.detectChanges()</code></a> to force the update</p>\n\n</li>\n</ul>\n<!-- links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间：5/3/2023</div>\n</div>\n\n\n<!-- links to this doc:\n - api/core\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NgModuleFactory\n - api/forms/FormControlDirective\n - api/forms/FormControlName\n - api/platform-browser-dynamic\n - api/platform-browser-dynamic/JitCompilerFactory\n - api/upgrade\n - guide/lazy-loading-ngmodules\n - guide/releases\n - guide/testing-services\n - guide/update-to-version-14\n-->\n<!-- links from this doc:\n - /guide/glossary#aot\n - /guide/glossary#jit\n - api\n - api/animations/style\n - api/animations/trigger\n - api/common/APP_BASE_HREF\n - api/common/AsyncPipe\n - api/common/DATE_PIPE_DEFAULT_OPTIONS\n - api/common/DATE_PIPE_DEFAULT_TIMEZONE\n - api/common/NgComponentOutlet\n - api/common/NgComponentOutlet#ngComponentOutletNgModule\n - api/common/NgFor\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/testing/HttpTestingController\n - api/common/http/testing/TestRequest\n - api/common/isPlatformWorkerApp\n - api/common/isPlatformWorkerUi\n - api/core/APP_ID\n - api/core/ApplicationRef#bootstrap\n - api/core/ChangeDetectorRef#detectchanges\n - api/core/Compiler\n - api/core/CompilerFactory\n - api/core/CompilerOptions\n - api/core/Component\n - api/core/Component#moduleId\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/ContentChild\n - api/core/DefaultIterableDiffer\n - api/core/EnvironmentInjector#runInContext\n - api/core/Injectable\n - api/core/Injectable#providedIn\n - api/core/InjectionToken\n - api/core/Input\n - api/core/ModuleWithComponentFactories\n - api/core/ModuleWithProviders\n - api/core/NgModule\n - api/core/NgModuleFactory\n - api/core/PlatformRef#bootstrapModule\n - api/core/PlatformRef#bootstrapModuleFactory\n - api/core/StateKey\n - api/core/TemplateRef\n - api/core/TransferState\n - api/core/Type\n - api/core/ViewChild\n - api/core/ViewContainerRef#createComponent\n - api/core/createComponent\n - api/core/createNgModule\n - api/core/defineInjectable\n - api/core/getModuleFactory\n - api/core/getNgModuleById\n - api/core/makeStateKey\n - api/core/ng-template\n - api/core/runInInjectionContext\n - api/core/testing/TestBed\n - api/core/testing/TestBed#get\n - api/core/testing/TestBed#inject\n - api/core/testing/async\n - api/core/testing/waitForAsync\n - api/forms/AbstractControlOptions\n - api/forms/FormBuilder#group\n - api/forms/FormControl\n - api/forms/FormControlDirective\n - api/forms/FormGroup\n - api/forms/NgModel\n - api/forms/ReactiveFormsModule\n - api/platform-browser-dynamic/JitCompilerFactory\n - api/platform-browser-dynamic/RESOURCE_CACHE_PROVIDER\n - api/platform-browser/BrowserModule#withservertransition\n - api/platform-browser/bootstrapApplication\n - api/platform-server/PlatformConfig\n - api/platform-server/ServerModule\n - api/platform-server/ServerTransferStateModule\n - api/platform-server/platformDynamicServer\n - api/platform-server/platformServer\n - api/platform-server/renderApplication\n - api/router/CanActivate\n - api/router/CanDeactivate\n - api/router/CanLoad\n - api/router/CanMatch\n - api/router/CanMatchFn\n - api/router/DeprecatedGuard\n - api/router/LoadChildren\n - api/router/LoadChildrenCallback\n - api/router/NavigationError\n - api/router/ROUTES\n - api/router/Route\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - api/router/Routes\n - api/router/UrlCreationOptions#queryParamsHandling\n - api/router/UrlSerializer\n - api/router/mapToCanMatch\n - api/router/provideRouter\n - api/router/provideRoutes\n - api/router/testing/setupTestingRouter\n - api/router/withRouterConfig\n - api/service-worker/SwUpdate\n - api/service-worker/SwUpdate#activateUpdate\n - api/service-worker/SwUpdate#activated\n - api/service-worker/SwUpdate#available\n - api/service-worker/SwUpdate#versionUpdates\n - api/service-worker/VersionReadyEvent\n - api/upgrade\n - api/upgrade/static\n - api/upgrade/static/downgradeModule\n - api/upgrade/static/getAngularJSGlobal\n - api/upgrade/static/getAngularLib\n - api/upgrade/static/setAngularJSGlobal\n - api/upgrade/static/setAngularLib\n - api?status=deprecated\n - cli/update\n - guide/angular-compiler-options\n - guide/aot-compiler\n - guide/component-styles#deprecated-deep--and-ng-deep\n - guide/deployment#the-deploy-url\n - guide/deprecations#angular-devkitbuild-angular\n - guide/deprecations#angularcommon\n - guide/deprecations#angularcore\n - guide/deprecations#angularcoretesting\n - guide/deprecations#angularforms\n - guide/deprecations#angularplatform-browser\n - guide/deprecations#angularplatform-browser-dynamic\n - guide/deprecations#angularplatform-server\n - guide/deprecations#angularrouter\n - guide/deprecations#angularrouter-中的-loadchildren-字符串语法\n - guide/deprecations#angularservice-worker\n - guide/deprecations#angularupgrade\n - guide/deprecations#angularupgradestatic\n - guide/deprecations#bind---on---bindon--和-ref--前缀\n - guide/deprecations#bind--on--bindon--and-ref--prefixes\n - guide/deprecations#bind-syntax\n - guide/deprecations#binding-to-innertext-in-platform-server\n - guide/deprecations#canload-guards\n - guide/deprecations#canload-守卫\n - guide/deprecations#cannot-assign-to-template-variables\n - guide/deprecations#common\n - guide/deprecations#contentchild--input-used-together\n - guide/deprecations#contentchild--input-一起使用\n - guide/deprecations#core\n - guide/deprecations#deep---和-ng-deep-组件样式选择器\n - guide/deprecations#deep--and-ng-deep-component-style-selectors\n - guide/deprecations#deep-component-style-selector\n - guide/deprecations#dependency-on-a-reflect-metadata-polyfill-in-jit-mode\n - guide/deprecations#deprecated-apis\n - guide/deprecations#deprecated-apis-and-features\n - guide/deprecations#deprecated-cli-apis-and-options\n - guide/deprecations#deprecated-features\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v11-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v12-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v14-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v15-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v16-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v17-or-later\n - guide/deprecations#deprecated-features-that-can-be-removed-in-v18-or-later\n - guide/deprecations#deprecated-features-with-no-planned-removal-version\n - guide/deprecations#entryComponents\n - guide/deprecations#entrycomponents-and-analyze_for_entry_components-no-longer-required\n - guide/deprecations#full-template-type-check\n - guide/deprecations#fulltemplatetypecheck\n - guide/deprecations#index\n - guide/deprecations#input-setter-coercion\n - guide/deprecations#jit-api-changes\n - guide/deprecations#jit-api-changes-due-to-viewengine-deprecation\n - guide/deprecations#jit-模式下对反射元数据-polyfill-的依赖\n - guide/deprecations#loadchildren-string-syntax\n - guide/deprecations#loadchildren-string-syntax-in-angularrouter\n - guide/deprecations#loadchildren-字符串语法\n - guide/deprecations#modulewithproviders-type-without-a-generic\n - guide/deprecations#ngmodel-reactive\n - guide/deprecations#ngmodel-with-reactive-forms\n - guide/deprecations#platform-browser\n - guide/deprecations#platform-browser-dynamic\n - guide/deprecations#platform-server\n - guide/deprecations#public-router-properties\n - guide/deprecations#reflect-metadata\n - guide/deprecations#removed-apis\n - guide/deprecations#router\n - guide/deprecations#router-can-load\n - guide/deprecations#router-class-and-injection-token-guards\n - guide/deprecations#router-class-and-injectiontoken-guards-and-resolvers\n - guide/deprecations#router-writable-properties\n - guide/deprecations#router-的公共属性\n - guide/deprecations#style-sanitization-for-style-and-styleprop-bindings\n - guide/deprecations#style-和-styleprop-绑定的样式清理\n - guide/deprecations#template-tag\n - guide/deprecations#template-标签\n - guide/deprecations#testing\n - guide/deprecations#testrequest-accepting-errorevent\n - guide/deprecations#testrequest-errorevent\n - guide/deprecations#testrequest-接受-errorevent-参数\n - guide/deprecations#upgrade\n - guide/deprecations#upgrade-static\n - guide/deprecations#viewchild--contentchild-static-resolution-as-the-default\n - guide/deprecations#viewchild--contentchild-默认使用静态解析\n - guide/deprecations#web-tracing-framework-integration\n - guide/deprecations#web-跟踪框架集成\n - guide/deprecations#wrappedvalue\n - guide/deprecations#wtfstarttimerange-and-all-wtf-apis\n - guide/deprecations#wtfstarttimerange-和所有-wtf-api\n - guide/deprecations#不再需要-entrycomponents-和-analyze_for_entry_components\n - guide/deprecations#不带泛型的-modulewithproviders-类型\n - guide/deprecations#删除的-api\n - guide/deprecations#可以在-v11-或更高版本中删除的已弃用特性\n - guide/deprecations#可以在-v12-或更高版本中删除的已弃用特性\n - guide/deprecations#可以在-v14-或更高版本中删除的已弃用特性\n - guide/deprecations#可以在-v15-或更高版本中删除的已弃用特性\n - guide/deprecations#可以在-v16-或更高版本中删除的已弃用特性\n - guide/deprecations#可以在-v17-或更高版本中删除的已弃用特性\n - guide/deprecations#和响应式表单一起使用-ngmodel\n - guide/deprecations#在-platform-server-中绑定到-innertext\n - guide/deprecations#将会在-v18-或更高版本中删除的已弃用功能\n - guide/deprecations#已弃用的-api\n - guide/deprecations#已弃用的-api-和特性\n - guide/deprecations#已弃用的特性\n - guide/deprecations#弃用的-cli-api-和选项\n - guide/deprecations#无法赋值给模板变量\n - guide/deprecations#没有计划删除版本的过时特性\n - guide/deprecations#由于-viewengine-弃用而导致的-jit-api-更改\n - guide/deprecations#索引\n - guide/deprecations#路由器类和-injectiontoken-守卫和解析器\n - guide/deprecations#输入-setter-强制类型转换\n - guide/migration-module-with-providers\n - guide/releases#deprecation-practices\n - guide/static-query-migration\n - guide/template-typecheck#input-setter-coercion\n - guide/upgrade\n - https://developers.google.com/web/updates/2017/10/remove-shadow-piercing\n - https://github.com/angular/angular-cli/blob/a491b09800b493fe01301387fa9a025f7c7d4808/packages/ngtools/webpack/src/transformers/import_factory.ts#L104-L113\n - https://github.com/angular/angular-cli/pull/14473\n - https://github.com/angular/angular/blob/main/CHANGELOG.md\n - https://github.com/angular/angular/issues/40091\n - https://github.com/angular/angular/issues/43133\n - https://github.com/angular/components/blob/main/CHANGELOG.md\n - https://github.com/fgnass/domino\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/deprecations.md?message=docs%3A%20请简述你的修改...\n - https://github.com/rbuckton/reflect-metadata\n - https://google.github.io/tracing-framework\n - https://update.angular.io\n - https://v10.angular.cn/guide/deprecations#removed\n - https://v10.angular.io/guide/deprecations#removed\n - https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-3.html#separate-write-types-on-properties\n-->"}