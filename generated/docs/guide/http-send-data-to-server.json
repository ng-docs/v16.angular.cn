{"id":"guide/http-send-data-to-server","title":"HTTP: Send data to a server","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/http-send-data-to-server.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"http-send-data-to-a-server\" translation-result=\"on\">HTTP：向服务器发送数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#http-send-data-to-a-server\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\">HTTP: Send data to a server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#http-send-data-to-a-server\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">除了从服务器获取数据外，<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 还支持其它一些 HTTP 方法，比如 PUT，POST 和 DELETE，你可以用它们来修改远程数据。</p><p translation-origin=\"off\">In addition to fetching data from a server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> supports other HTTP methods such as PUT, POST, and DELETE, which you can use to modify the remote data.</p>\n\n<p translation-result=\"on\">本指南中的这个范例应用包括一个简略版本的《英雄之旅》，它会获取英雄数据，并允许用户添加、删除和修改它们。下面几节在 <code>HeroesService</code> 范例中展示了数据更新方法的一些例子。</p><p translation-origin=\"off\">The sample app for this guide includes an abridged version of the \"Tour of Heroes\" example that fetches heroes and enables users to add, delete, and update them.\nThe following sections show examples of the data-update methods from the sample's <code>HeroesService</code>.</p>\n\n<h2 id=\"make-a-post-request\" translation-result=\"on\">发出 POST 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-post-request\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Make a POST request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-post-request\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">应用经常在提交表单时通过 POST 请求向服务器发送数据。下面这个例子中，<code>HeroesService</code> 在向数据库添加英雄时发起了一个 HTTP POST 请求。</p><p translation-origin=\"off\">Apps often send data to a server with a POST request when submitting a form.\nIn the following example, the <code>HeroesService</code> makes an HTTP POST request when adding a hero to the database.</p>\n\n<code-example header=\"app/heroes/heroes.service.ts (addHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\">\n/** POST: add a new hero to the database */\naddHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 方法像 <code>get()</code> 一样也有类型参数，可以用它来指出你期望服务器返回特定类型的数据。该方法需要一个资源 URL 和两个额外的参数：</p><p translation-origin=\"off\">The <code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> method is similar to <code>get()</code> in that it has a type parameter, which you can use to specify that you expect the server to return data of a given type.\nThe method takes a resource URL and two additional parameters:</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">参数</nt-wrapper><nt-wrapper translation-origin=\"off\">Parameter</nt-wrapper></th>\n<th align=\"left\"><nt-wrapper translation-result=\"on\">详情</nt-wrapper><nt-wrapper translation-origin=\"off\">Details</nt-wrapper></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\">body</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">要在请求正文中 POST 的数据。</nt-wrapper><nt-wrapper translation-origin=\"off\">The data to POST in the body of the request.</nt-wrapper></td>\n</tr>\n\n<tr>\n<td align=\"left\">options</td>\n<td align=\"left\"><nt-wrapper translation-result=\"on\">包含方法选项的对象，在这里用于指定所需的标头。</nt-wrapper><nt-wrapper translation-origin=\"off\">An object containing method options which, in this case, specify required headers.</nt-wrapper></td>\n</tr>\n\n</tbody>\n</table>\n<p translation-result=\"on\">该示例<a href=\"guide/http-handle-request-errors#error-details\">如上所述</a>会捕获错误。</p><p translation-origin=\"off\">The example catches errors as <a href=\"guide/http-handle-request-errors#error-details\">described above</a>.</p>\n\n<p translation-result=\"on\"><code>HeroesComponent</code> 通过订阅该服务方法返回的 <code>Observable</code> 发起了一次实际的 <code>POST</code> 操作。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> initiates the actual POST operation by subscribing to the <code>Observable</code> returned by this service method.</p>\n\n<code-example header=\"app/heroes/heroes.component.ts (addHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\">\nthis.heroesService\n  .addHero(newHero)\n  .subscribe(hero =&gt; this.heroes.push(hero));\n\n</code-example>\n<p translation-result=\"on\">当服务器成功做出响应时，会带有这个新创建的英雄，然后该组件就会把这个英雄添加到正在显示的 <code>heroes</code> 列表中。</p><p translation-origin=\"off\">When the server responds successfully with the newly added hero, the component adds that hero to the displayed <code>heroes</code> list.</p>\n\n<h2 id=\"make-a-delete-request\" translation-result=\"on\">发出删除请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-delete-request\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Make a DELETE request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-delete-request\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">该应用可以把英雄的 ID 传给 <code>HttpClient.delete</code> 方法的请求 URL 来删除一个英雄。</p><p translation-origin=\"off\">This application deletes a hero with the <code>HttpClient.delete</code> method by passing the hero's ID in the request URL.</p>\n\n<code-example header=\"app/heroes/heroes.service.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\">\n/** DELETE: delete the hero from the server */\ndeleteHero(id: number): Observable&lt;unknown&gt; {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">当 <code>HeroesComponent</code> 订阅了该服务方法返回的 <code>Observable</code> 时，就会发起一次实际的 <code>DELETE</code> 操作。</p><p translation-origin=\"off\">The <code>HeroesComponent</code> initiates the actual DELETE operation by subscribing to the <code>Observable</code> returned by this service method.</p>\n\n<code-example header=\"app/heroes/heroes.component.ts (deleteHero)\" path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\">\nthis.heroesService\n  .deleteHero(hero.id)\n  .subscribe();\n\n</code-example>\n<p translation-result=\"on\">该组件不会等待删除操作的结果，所以它的 subscribe（订阅）中没有回调函数。不过就算你不关心结果，也仍然要订阅它。调用 <code>subscribe()</code> 方法会<strong>执行</strong>这个可观察对象，这时才会真的发起 DELETE 请求。</p><p translation-origin=\"off\">The component isn't expecting a result from the delete operation, so it subscribes without a callback.\nEven though you are not using the result, you still have to subscribe.\nCalling the <code>subscribe()</code> method <em>executes</em> the observable, which is what initiates the DELETE request.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">你必须调用 <code>subscribe()</code>，否则什么也不会发生。只调用 <code>HeroesService.deleteHero()</code> 是不会发起 DELETE 请求的。</p><p translation-origin=\"off\">You must call <code>subscribe()</code> or nothing happens.\nJust calling <code>HeroesService.deleteHero()</code> does not initiate the DELETE request.</p>\n\n</div>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\">\n// oops ... subscribe() is missing so nothing happens\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n<h2 id=\"make-a-put-request\" translation-result=\"on\">发出 PUT 请求<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-put-request\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Make a PUT request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#make-a-put-request\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">应用可以使用 HttpClient 服务发送 PUT 请求。下面的 <code>HeroesService</code> 范例（就像 POST 范例一样）用一个修改过的数据替换了该资源。</p><p translation-origin=\"off\">An app can send PUT requests using the HTTP client service.\nThe following <code>HeroesService</code> example, like the POST example, replaces a resource with updated data.</p>\n\n<code-example header=\"app/heroes/heroes.service.ts (updateHero)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\">\n/** PUT: update the hero on the server. Returns the updated hero upon success. */\nupdateHero(hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.put&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<p translation-result=\"on\">对于任何返回可观察对象的 HTTP 方法，调用者 <code>HeroesComponent.update()</code> <a href=\"guide/http-request-data-from-server#always-subscribe\" title=\"为什么你必须始终订阅。\">必须 <code>subscribe()</code></a> 从 <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> 返回的可观察对象才会发起请求。</p><p translation-origin=\"off\">As for any of the HTTP methods that return an observable, the caller, <code>HeroesComponent.update()</code> <a href=\"guide/http-request-data-from-server#always-subscribe\" title=\"Why you must always subscribe.\">must <code>subscribe()</code></a> to the observable returned from the <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> in order to initiate the request.</p>\n\n<h2 id=\"add-and-updating-headers\" translation-result=\"on\">添加和更新表头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-and-updating-headers\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\">Add and updating headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-and-updating-headers\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">很多服务器都需要额外的头来执行保存操作。比如，服务器可能需要一个授权令牌，或者需要 <code>Content-Type</code> 头来显式声明请求体的 MIME 类型。</p><p translation-origin=\"off\">Many servers require extra headers for save operations.\nFor example, a server might require an authorization token, or \"Content-Type\" header to explicitly declare the MIME type of the request body.</p>\n\n<h3 id=\"add-headers\" translation-result=\"on\">添加标头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-headers\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Add headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#add-headers\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code>HeroesService</code> 在一个 <code>httpOptions</code> 对象中定义了这样的头，它们被传给每个 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的保存型方法。</p><p translation-origin=\"off\">The <code>HeroesService</code> defines such headers in an <code>httpOptions</code> object that are passed to every <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> save method.</p>\n\n<code-example header=\"app/heroes/heroes.service.ts (httpOptions)\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    Authorization: 'my-auth-token'\n  })\n};\n\n</code-example>\n<h3 id=\"update-headers\" translation-result=\"on\">更新标头<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#update-headers\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Update headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http-send-data-to-server#update-headers\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你不能直接修改前面的选项对象中的 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 请求头，因为 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 类的实例是不可变对象。请改用 <code>set()</code> 方法，以返回当前实例应用了新更改之后的副本。</p><p translation-origin=\"off\">You can't directly modify the existing headers within the previous options\nobject because instances of the <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> class are immutable.\nUse the <code>set()</code> method instead, to return a clone of the current instance with the new changes applied.</p>\n\n<p translation-result=\"on\">下面的例子演示了当旧令牌过期时，可以在发起下一个请求之前更新授权头。</p><p translation-origin=\"off\">The following example shows how, when an old token expires, you can update the authorization header before making the next request.</p>\n\n<code-example linenums=\"false\" path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<p><a id=\"url-params\"></a></p>\n\n  <div class=\"reviewed\">最后复查时间：3/16/2023</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpHeaders\n - guide/http-handle-request-errors#error-details\n - guide/http-request-data-from-server#always-subscribe\n - guide/http-send-data-to-server#add-and-updating-headers\n - guide/http-send-data-to-server#add-headers\n - guide/http-send-data-to-server#http-send-data-to-a-server\n - guide/http-send-data-to-server#http向服务器发送数据\n - guide/http-send-data-to-server#make-a-delete-request\n - guide/http-send-data-to-server#make-a-post-request\n - guide/http-send-data-to-server#make-a-put-request\n - guide/http-send-data-to-server#update-headers\n - guide/http-send-data-to-server#发出-post-请求\n - guide/http-send-data-to-server#发出-put-请求\n - guide/http-send-data-to-server#发出删除请求\n - guide/http-send-data-to-server#更新标头\n - guide/http-send-data-to-server#添加和更新表头\n - guide/http-send-data-to-server#添加标头\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/guide/http-send-data-to-server.md?message=docs%3A%20请简述你的修改...\n-->"}