{"id":"api/router/Route","title":"Route","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/router\", \"name\": \"@angular/router\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/router/Route\", \"name\": \"Route\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/router\">@angular/router</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/packages/router/src/models.ts?message=docs(router)%3A%20请简述你的修改...#L316-L891\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/router/src/models.ts#L316-L891\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"route\">Route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#route\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label interface\">interface</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">定义单个路由的配置对象。一组路由被收集在 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 数组中以定义 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 配置。路由器会尝试使用此对象中定义的配置选项，将给定 URL 的段与每个路由进行匹配。</p><p translation-origin=\"off\">A configuration object that defines a single route.\nA set of routes are collected in a <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> array to define a <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> configuration.\nThe router attempts to match segments of a given URL against each route,\nusing the configuration options defined in this object.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/router/Route#description\">查看\"说明\"...</a></p>\n  </section><section ng-should-translate=\"\" class=\"interface-overview\">\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface <a href=\"api/router/Route\" class=\"code-anchor\">Route</a> {\n  <a class=\"code-anchor\" href=\"api/router/Route#title\"><span class=\"member-name\">title</span>?: string | Type&lt;Resolve&lt;string&gt;&gt; | ResolveFn&lt;string&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#path\"><span class=\"member-name\">path</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#pathMatch\"><span class=\"member-name\">pathMatch</span>?: 'prefix' | 'full'</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#matcher\"><span class=\"member-name\">matcher</span>?: UrlMatcher</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#component\"><span class=\"member-name\">component</span>?: Type&lt;any&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#loadComponent\"><span class=\"member-name\">loadComponent</span>?: () =&gt; Type&lt;unknown&gt; | Observable&lt;Type&lt;unknown&gt; | DefaultExport&lt;Type&lt;unknown&gt;&gt;&gt; | Promise&lt;Type&lt;unknown&gt; | DefaultExport&lt;Type&lt;unknown&gt;&gt;&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#redirectTo\"><span class=\"member-name\">redirectTo</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#outlet\"><span class=\"member-name\">outlet</span>?: string</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canActivate\"><span class=\"member-name\">canActivate</span>?: Array&lt;CanActivateFn | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canMatch\"><span class=\"member-name\">canMatch</span>?: Array&lt;CanMatchFn | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canActivateChild\"><span class=\"member-name\">canActivateChild</span>?: Array&lt;CanActivateChildFn | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#canDeactivate\"><span class=\"member-name\">canDeactivate</span>?: Array&lt;CanDeactivateFn&lt;any&gt; | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor deprecated-api-item\" href=\"api/router/Route#canLoad\"><span class=\"member-name\">canLoad</span>?: Array&lt;CanLoadFn | DeprecatedGuard&gt;</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#data\"><span class=\"member-name\">data</span>?: Data</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#resolve\"><span class=\"member-name\">resolve</span>?: ResolveData</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#children\"><span class=\"member-name\">children</span>?: Routes</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#loadChildren\"><span class=\"member-name\">loadChildren</span>?: LoadChildren</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#runGuardsAndResolvers\"><span class=\"member-name\">runGuardsAndResolvers</span>?: RunGuardsAndResolvers</a>\n  <a class=\"code-anchor\" href=\"api/router/Route#providers\"><span class=\"member-name\">providers</span>?: Array&lt;Provider | EnvironmentProviders&gt;</a>\n}\n</code-example>\n\n\n</section>\n\n  \n<section ng-should-translate=\"\" class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\">欲知详情，请参阅<a href=\"guide/router\">《路由指南》</a>。</p><p translation-origin=\"off\">Supports static, parameterized, redirect, and wildcard routes, as well as\ncustom route data and resolve methods.</p>\n\n<p translation-result=\"on\">有关详细的用法信息，请参阅<a href=\"guide/router\">路由指南</a>。</p><p translation-origin=\"off\">For detailed usage information, see the <a href=\"guide/router\">Routing Guide</a>.</p>\n\n  <p>Further information is available in the <a href=\"api/router/Route#usage-notes\">Usage Notes...</a></p>\n</section>\n  \n<section ng-should-translate=\"\" class=\"instance-properties\">\n  <a name=\"properties\"></a>\n  <h2 id=\"instance-properties\">属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#instance-properties\"><i class=\"material-icons\">link</i></a></h2>\n  <table class=\"is-full-width list-table property-table\">\n    <thead>\n      <tr>\n        <th>属性</th>\n        <th>说明</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"title\"></a>\n          <code class=\"\"><span class=\"member-name\">title</span>?: string | <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;<a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a>&lt;string&gt;&gt; | <a href=\"api/router/ResolveFn\" class=\"code-anchor\">ResolveFn</a>&lt;string&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用于定义路由的页面标题。这可以是静态字符串或实现 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code> 的 <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code>。</p><p translation-origin=\"off\">Used to define a page title for the route. This can be a static string or an <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> that\nimplements <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>.</p>\n</div>\n          \n          <p>参见:</p>\n          <ul>\n            <li><p><code>PageTitleStrategy</code></p>\n</li>\n          </ul>\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"path\"></a>\n          <code class=\"\"><span class=\"member-name\">path</span>?: string</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">匹配的路径。不能与自定义 <code>matcher</code> 功能一起使用。使用路由器匹配表示法的 URL 字符串。可以是与任何 URL 匹配的通配符（<code>**</code>）（请参阅下面的使用说明）。默认值为 “/”（根路径）。</p><p translation-origin=\"off\">The path to match against. Cannot be used together with a custom <code>matcher</code> function.\nA URL string that uses router matching notation.\nCan be a wild card (<code>**</code>) that matches any URL (see Usage Notes below).\nDefault is \"/\" (the root path).</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"pathMatch\"></a>\n          <code class=\"\"><span class=\"member-name\">pathMatch</span>?: 'prefix' | 'full'</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">路径匹配策略，为 “prefix” 或 “full” 之一。默认为“prefix”。</p><p translation-origin=\"off\">The path-matching strategy, one of 'prefix' or 'full'.\nDefault is 'prefix'.</p>\n</div>\n          <p translation-result=\"on\">默认情况下，路由器会从左侧检查 URL 元素以查看 URL 是否与给定路径匹配，并在匹配上某个配置时停止。重要的是，URL 的每个段仍然必须与某个配置匹配。例如，如果路由的子项（children）之一与段“user”匹配，则认为“/team/11/user”与前缀“team/:id”匹配。也就是说，URL '/team/11/user' 可以匹配 <code>{path: 'team/:id', children: [{path: ':user', component: User}]}</code> 配置项，但当 <code>{path: 'team/:id', component: Team}</code> 中没有子项（children 属性）时则不匹配。</p><p translation-origin=\"off\">By default, the router checks URL elements from the left to see if the URL\nmatches a given path and stops when there is a config match. Importantly there must still be a\nconfig match for each segment of the URL. For example, '/team/11/user' matches the prefix\n'team/:id' if one of the route's children matches the segment 'user'. That is, the URL\n'/team/11/user' matches the config\n<code>{path: 'team/:id', children: [{path: ':user', component: User}]}</code>\nbut does not match when there are no children as in <code>{path: 'team/:id', component: Team}</code>.</p>\n\n<p translation-result=\"on\">路径匹配策略 'full' 匹配整个 URL。重定向空路径路由时，这样做很重要。否则，由于空路径是任何 URL 的前缀，因此路由器即使导航到重定向目标时也会应用重定向，从而创建一个无限循环。</p><p translation-origin=\"off\">The path-match strategy 'full' matches against the entire URL.\nIt is important to do this when redirecting empty-path routes.\nOtherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating\nto the redirect destination, creating an endless loop.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"matcher\"></a>\n          <code class=\"\"><span class=\"member-name\">matcher</span>?: <a href=\"api/router/UrlMatcher\" class=\"code-anchor\">UrlMatcher</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">自定义 URL 匹配功能。不能与 <code>path</code> 一起使用。</p><p translation-origin=\"off\">A custom URL-matching function. Cannot be used together with <code>path</code>.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"component\"></a>\n          <code class=\"\"><span class=\"member-name\">component</span>?: <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;any&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">路径匹配时实例化的组件。如果要由其子路由指定组件，则可以为空。</p><p translation-origin=\"off\">The component to instantiate when the path matches.\nCan be empty if child routes specify components.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"loadComponent\"></a>\n          <code class=\"\"><span class=\"member-name\">loadComponent</span>?: () =&gt; <a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt; | Observable&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt; | <a href=\"api/router/DefaultExport\" class=\"code-anchor\">DefaultExport</a>&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt;&gt;&gt; | Promise&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt; | <a href=\"api/router/DefaultExport\" class=\"code-anchor\">DefaultExport</a>&lt;<a href=\"api/core/Type\" class=\"code-anchor\">Type</a>&lt;unknown&gt;&gt;&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">指定惰性加载组件的对象。</p><p translation-origin=\"off\">An object specifying a lazy-loaded component.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"redirectTo\"></a>\n          <code class=\"\"><span class=\"member-name\">redirectTo</span>?: string</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">路径匹配时要重定向到的 URL。</p><p translation-origin=\"off\">A URL to redirect to when the path matches.</p>\n</div>\n          <p translation-result=\"on\">如果 URL 以斜杠 (/) 开头，则为绝对值，否则相对于路径 URL。请注意，在绝对重定向之后不会估算进一步的重定向。</p><p translation-origin=\"off\">Absolute if the URL begins with a slash (/), otherwise relative to the path URL.\nNote that no further redirects are evaluated after an absolute redirect.</p>\n\n<p translation-result=\"on\">当不存在时，路由器不会重定向。</p><p translation-origin=\"off\">When not present, router does not redirect.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"outlet\"></a>\n          <code class=\"\"><span class=\"member-name\">outlet</span>?: string</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\"><code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 对象的名字，当路径匹配时会把组件放置在其中。</p><p translation-origin=\"off\">Name of a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> object where the component can be placed\nwhen the path matches.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canActivate\"></a>\n          <code class=\"\"><span class=\"member-name\">canActivate</span>?: Array&lt;<a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a> | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">一个依赖注入标记的数组，用于查找 <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code> 处理程序，以确定是否允许当前用户激活组件。默认情况下，任何用户都可以激活。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanActivateFn\" class=\"code-anchor\">CanActivateFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanActivate\" class=\"code-anchor\">CanActivate</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nactivate the component. By default, any user can activate.</p>\n</div>\n          <p translation-result=\"on\">当使用函数而不是 DI 标记时，函数可以调用 <code>inject</code> 来获取任何所需的依赖项。此 <code>inject</code> 调用必须在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canMatch\"></a>\n          <code class=\"\"><span class=\"member-name\">canMatch</span>?: Array&lt;<a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a> | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用于查找 <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a>()</code> 处理程序的 <code><a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a></code> 或 DI 标记的数组，以确定是否允许当前用户匹配 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>。默认情况下，任何路由都可以匹配。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanMatchFn\" class=\"code-anchor\">CanMatchFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanMatch\" class=\"code-anchor\">CanMatch</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nmatch the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>. By default, any route can match.</p>\n</div>\n          <p translation-result=\"on\">当使用函数而不是 DI 标记时，函数可以调用 <code>inject</code> 来获取任何所需的依赖项。此 <code>inject</code> 调用必须在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canActivateChild\"></a>\n          <code class=\"\"><span class=\"member-name\">canActivateChild</span>?: Array&lt;<a href=\"api/router/CanActivateChildFn\" class=\"code-anchor\">CanActivateChildFn</a> | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用于查找 <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> 处理程序的 DI 标记数组，以确定是否允许当前用户激活组件的子项。默认情况下，任何用户都可以激活子项。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanActivateChildFn\" class=\"code-anchor\">CanActivateChildFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanActivateChild\" class=\"code-anchor\">CanActivateChild</a>()</code> handlers,\nin order to determine if the current user is allowed to activate\na child of the component. By default, any user can activate a child.</p>\n</div>\n          <p translation-result=\"on\">当使用函数而不是 DI 标记时，函数可以调用 <code>inject</code> 来获取任何所需的依赖项。此 <code>inject</code> 调用必须在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canDeactivate\"></a>\n          <code class=\"\"><span class=\"member-name\">canDeactivate</span>?: Array&lt;<a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a>&lt;any&gt; | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用于查找 <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code> 处理程序的 DI 标记数组，以确定是否允许当前用户停用组件。默认情况下，任何用户都可以停用。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanDeactivateFn\" class=\"code-anchor\">CanDeactivateFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanDeactivate\" class=\"code-anchor\">CanDeactivate</a>()</code>\nhandlers, in order to determine if the current user is allowed to\ndeactivate the component. By default, any user can deactivate.</p>\n</div>\n          <p translation-result=\"on\">当使用函数而不是 DI 标记时，函数可以调用 <code>inject</code> 来获取任何所需的依赖项。此 <code>inject</code> 调用必须在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"canLoad\"></a>\n          <code class=\"deprecated-api-item\"><span class=\"member-name\">canLoad</span>?: Array&lt;<a href=\"api/router/CanLoadFn\" class=\"code-anchor\">CanLoadFn</a> | <a href=\"api/router/DeprecatedGuard\" class=\"code-anchor\">DeprecatedGuard</a>&gt;</code>\n        </td>\n        <td>\n          <label class=\"api-status-label deprecated\" title=\"本 API 已弃用\">已弃用</label>\n          \n          <div no-translate=\"\"><p translation-result=\"on\">用于查找 <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code> 处理程序的 DI 标记数组，以确定是否允许当前用户加载组件。默认情况下，任何用户都可以加载。</p><p translation-origin=\"off\">An array of <code><a href=\"api/router/CanLoadFn\" class=\"code-anchor\">CanLoadFn</a></code> or DI tokens used to look up <code><a href=\"api/router/CanLoad\" class=\"code-anchor\">CanLoad</a>()</code>\nhandlers, in order to determine if the current user is allowed to\nload the component. By default, any user can load.</p>\n</div>\n          <p translation-result=\"on\">当使用函数而不是 DI 标记时，函数可以调用 <code>inject</code> 来获取任何所需的依赖项。此 <code>inject</code> 调用必须在同步上下文中完成。</p><p translation-origin=\"off\">When using a function rather than DI tokens, the function can call <code>inject</code> to get any required\ndependencies. This <code>inject</code> call must be done in a synchronous context.</p>\n\n\n          <p translation-result=\"on\">改为使用 <code>canMatch</code></p><p translation-origin=\"off\"><strong>Deprecated</strong> Use <code>canMatch</code> instead</p>\n\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"data\"></a>\n          <code class=\"\"><span class=\"member-name\">data</span>?: <a href=\"api/router/Data\" class=\"code-anchor\">Data</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\"><code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 提供给组件的由开发人员定义的额外数据。默认情况下，不传递任何额外数据。</p><p translation-origin=\"off\">Additional developer-defined data provided to the component via\n<code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>. By default, no additional data is passed.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"resolve\"></a>\n          <code class=\"\"><span class=\"member-name\">resolve</span>?: <a href=\"api/router/ResolveData\" class=\"code-anchor\">ResolveData</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">DI 令牌的映射，用于查找数据解析器。请参阅 <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>。</p><p translation-origin=\"off\">A map of DI tokens used to look up data resolvers. See <code><a href=\"api/router/Resolve\" class=\"code-anchor\">Resolve</a></code>.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"children\"></a>\n          <code class=\"\"><span class=\"member-name\">children</span>?: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">一个子 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 对象数组，用于指定嵌套路由配置。</p><p translation-origin=\"off\">An array of child <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> objects that specifies a nested route\nconfiguration.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"loadChildren\"></a>\n          <code class=\"\"><span class=\"member-name\">loadChildren</span>?: <a href=\"api/router/LoadChildren\" class=\"code-anchor\">LoadChildren</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">一个对象，指定要惰性加载的子路由。</p><p translation-origin=\"off\">An object specifying lazy-loaded child routes.</p>\n</div>\n          \n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"runGuardsAndResolvers\"></a>\n          <code class=\"\"><span class=\"member-name\">runGuardsAndResolvers</span>?: <a href=\"api/router/RunGuardsAndResolvers\" class=\"code-anchor\">RunGuardsAndResolvers</a></code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">何时在路由上运行警卫和解析器的策略。</p><p translation-origin=\"off\">A policy for when to run guards and resolvers on a route.</p>\n</div>\n          <p translation-result=\"on\">激活或停用路由时，守卫和/或解析器将始终运行。当路由未更改时，默认行为与 <code>paramsChange</code> 相同。</p><p translation-origin=\"off\">Guards and/or resolvers will always run when a route is activated or deactivated. When a route\nis unchanged, the default behavior is the same as <code>paramsChange</code>.</p>\n\n<p translation-result=\"on\"><code>paramsChange</code>：当路径或路径参数更改时重新运行警卫和解析器。这不包括查询参数。此选项是默认值。</p><p translation-origin=\"off\"><code>paramsChange</code> : Rerun the guards and resolvers when path or\npath param changes. This does not include query parameters. This option is the default.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>always</code>：在每次执行时运行。</p><p translation-origin=\"off\"><code>always</code> : Run on every execution.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>pathParamsChange</code>：路径参数更改时重新运行保护器和解析器。这不会比较矩阵或查询参数。</p><p translation-origin=\"off\"><code>pathParamsChange</code> : Rerun guards and resolvers when the path params\nchange. This does not compare matrix or query parameters.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>paramsOrQueryParamsChange</code>：在路径、矩阵或查询参数更改时运行。</p><p translation-origin=\"off\"><code>paramsOrQueryParamsChange</code> : Run when path, matrix, or query parameters change.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>pathParamsOrQueryParamsChange</code>：当路径参数更改或查询参数更改时，重新运行保护器和解析器。这不包括矩阵参数。</p><p translation-origin=\"off\"><code>pathParamsOrQueryParamsChange</code> : Rerun guards and resolvers when the path params\nchange or query params have changed. This does not include matrix parameters.</p>\n\n</li>\n</ul>\n\n          <p>参见:</p>\n          <ul>\n            <li><p><code><a href=\"api/router/RunGuardsAndResolvers\" class=\"code-anchor\">RunGuardsAndResolvers</a></code></p>\n</li>\n          </ul>\n        </td>\n      </tr>\n      <tr class=\"instance-property\">\n        <td>\n          <a id=\"providers\"></a>\n          <code class=\"\"><span class=\"member-name\">providers</span>?: Array&lt;<a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a> | <a href=\"api/core/EnvironmentProviders\" class=\"code-anchor\">EnvironmentProviders</a>&gt;</code>\n        </td>\n        <td>\n          <div no-translate=\"\"><p translation-result=\"on\">用于此 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 及其 <code>children</code> 项的 <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> 数组。</p><p translation-origin=\"off\">A <code><a href=\"api/core/Provider\" class=\"code-anchor\">Provider</a></code> array to use for this <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> and its <code>children</code>.</p>\n</div>\n          <p translation-result=\"on\"><code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 将为此 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 创建一个新的 <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code>，并将其用于此 <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> 及其 <code>children</code>。如果此路由还有一个返回 <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code> 的 <code>loadChildren</code> 函数，则此注入器将被用作惰性加载模块的父级。</p><p translation-origin=\"off\">The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> will create a new <code><a href=\"api/core/EnvironmentInjector\" class=\"code-anchor\">EnvironmentInjector</a></code> for this\n<code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> and use it for this <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> and its <code>children</code>. If this\nroute also has a <code>loadChildren</code> function which returns an <code><a href=\"api/core/NgModuleRef\" class=\"code-anchor\">NgModuleRef</a></code>, this injector will be\nused as the parent of the lazy loaded module.</p>\n\n\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</section>\n  \n\n<section ng-should-translate=\"\" class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"simple-configuration\" translation-result=\"on\">简单配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#simple-configuration\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Simple Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#simple-configuration\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由指定在导航到 <code>/team/11/user/bob</code> 时，路由器会在其中创建带有 'User' 子组件的 'Team' 组件。</p><p translation-origin=\"off\">The following route specifies that when navigating to, for example,\n<code>/team/11/user/bob</code>, the router creates the 'Team' component\nwith the 'User' child component in it.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n component: Team,\n  children: [{\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<h3 id=\"multiple-outlets\" translation-result=\"on\">多重出口<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Multiple Outlets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#multiple-outlets\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由创建具有多个出口的兄弟组件。当导航到 <code>/team/11(aux:chat/jim)</code> 时，路由器会在 'Chat' 组件旁边创建 'Team' 组件。'Chat' 组件放置在 'aux' 出口中。</p><p translation-origin=\"off\">The following route creates sibling components with multiple outlets.\nWhen navigating to <code>/team/11(aux:chat/jim)</code>, the router creates the 'Team' component next to\nthe 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team\n}, {\n  path: 'chat/:user',\n  component: Chat\n  outlet: 'aux'\n}]\n</code-example>\n<h3 id=\"wild-cards\" translation-result=\"on\">通配符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#wild-cards\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Wild Cards<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#wild-cards\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由使用通配符表示法来指定始终实例化的组件，无论你导航到何处。</p><p translation-origin=\"off\">The following route uses wild-card notation to specify a component\nthat is always instantiated regardless of where you navigate to.</p>\n\n<code-example>\n[{\n  path: '**',\n  component: WildcardComponent\n}]\n</code-example>\n<h3 id=\"redirects\" translation-result=\"on\">重定向<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#redirects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Redirects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#redirects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">以下路由在查找子路径时使用 <code>redirectTo</code> 属性忽略给定 URL 的一部分。</p><p translation-origin=\"off\">The following route uses the <code>redirectTo</code> property to ignore a segment of\na given URL when looking for a child path.</p>\n\n<p translation-result=\"on\">当导航到“/team/11/legacy/user/jim”时，路由器将 URL 段“/team/11/legacy/user/jim”更改为“/team/11/user/jim”，然后实例化包含 User 子组件的团队组件。</p><p translation-origin=\"off\">When navigating to '/team/11/legacy/user/jim', the router changes the URL segment\n'/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates\nthe Team component with the User child component in it.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: 'legacy/user/:name',\n    redirectTo: 'user/:name'\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">重定向路径可以是相对的（如本示例所示），也可以是绝对的。<code>redirectTo</code> 值更改为绝对 URL 段 '/user/:name'，则结果 URL 也是绝对 URL，'/user/jim'。</p><p translation-origin=\"off\">The redirect path can be relative, as shown in this example, or absolute.\nIf we change the <code>redirectTo</code> value in the example to the absolute URL segment '/user/:name',\nthe result URL is also absolute, '/user/jim'.</p>\n\n<h3 id=\"empty-path\" translation-result=\"on\">空路径<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#empty-path\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Empty Path<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#empty-path\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在下列配置中，当导航到 <code>/team/11</code> 时，路由器会实例化 'AllUsers' 组件。</p><p translation-origin=\"off\">Empty-path route configurations can be used to instantiate components that do not 'consume'\nany URL segments.</p>\n\n<p translation-result=\"on\">在以下配置中，导航到 <code>/team/11</code> 时，路由器会实例化 'AllUsers' 组件。</p><p translation-origin=\"off\">In the following configuration, when navigating to\n<code>/team/11</code>, the router instantiates the 'AllUsers' component.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: AllUsers\n  }, {\n    path: 'user/:name',\n    component: User\n  }]\n}]\n</code-example>\n<p translation-result=\"on\">请注意，空路径路由会继承其父级的参数和数据。</p><p translation-origin=\"off\">Empty-path routes can have children. In the following example, when navigating\nto <code>/team/11/user/jim</code>, the router instantiates the wrapper component with\nthe user component in it.</p>\n\n<p translation-result=\"on\">请注意，空路径路由会继承其父级的参数和数据。</p><p translation-origin=\"off\">Note that an empty path route inherits its parent's parameters and data.</p>\n\n<code-example>\n[{\n  path: 'team/:id',\n  component: Team,\n  children: [{\n    path: '',\n    component: WrapperCmp,\n    children: [{\n      path: 'user/:name',\n      component: User\n    }]\n  }]\n}]\n</code-example>\n<h3 id=\"matching-strategy\" translation-result=\"on\">匹配策略<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#matching-strategy\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Matching Strategy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#matching-strategy\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">默认的路径匹配策略是 'prefix'，这意味着路由器从左开始检查 URL 元素以查看 URL 是否与指定的路径匹配。比如，'/team/11/user' 与 'team/:id' 匹配。</p><p translation-origin=\"off\">The default path-match strategy is 'prefix', which means that the router\nchecks URL elements from the left to see if the URL matches a specified path.\nFor example, '/team/11/user' matches 'team/:id'.</p>\n\n<code-example>\n[{\n  path: '',\n  pathMatch: 'prefix', //default\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<p translation-result=\"on\">在以下示例中，提供 'full' <code>pathMatch</code> 策略可确保路由器仅在导航到 '/' 时才应用重定向。</p><p translation-origin=\"off\">You can specify the path-match strategy 'full' to make sure that the path\ncovers the whole unconsumed URL. It is important to do this when redirecting\nempty-path routes. Otherwise, because an empty path is a prefix of any URL,\nthe router would apply the redirect even when navigating to the redirect destination,\ncreating an endless loop.</p>\n\n<p translation-result=\"on\">在以下示例中，提供 'full' <code>pathMatch</code> 策略可确保路由器当且仅当导航到 '/' 时应用重定向。</p><p translation-origin=\"off\">In the following example, supplying the 'full' <code>pathMatch</code> strategy ensures\nthat the router applies the redirect if and only if navigating to '/'.</p>\n\n<code-example>\n[{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'main'\n}, {\n  path: 'main',\n  component: Main\n}]\n</code-example>\n<h3 id=\"componentless-routes\" translation-result=\"on\">无组件路由<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#componentless-routes\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Componentless Routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#componentless-routes\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在以下示例中，'MainChild' 和 'AuxChild' 是同级。当导航到 'parent/10/(a//aux:b)' 时，该路由会实例化彼此相邻的主要子组件和 aux 子组件。为此，应用程序组件必须定义主要和辅助出口。</p><p translation-origin=\"off\">You can share parameters between sibling components.\nFor example, suppose that two sibling components should go next to each other,\nand both of them require an ID parameter. You can accomplish this using a route\nthat does not specify a component at the top level.</p>\n\n<p translation-result=\"on\">在以下示例中，“MainChild”和“AuxChild”是同级。当导航到 'parent/10/(a//aux:b)' 时，该路由会实例化彼此相邻的主子组件和辅助子组件。为此，应用程序组件必须定义主要的出口和辅助出口。</p><p translation-origin=\"off\">In the following example, 'MainChild' and 'AuxChild' are siblings.\nWhen navigating to 'parent/10/(a//aux:b)', the route instantiates\nthe main child and aux child components next to each other.\nFor this to work, the application component must have the primary and aux outlets defined.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: 'a', component: MainChild },\n     { path: 'b', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<p translation-result=\"on\">当用空路径字符串定义子组件时，这特别有用，如以下示例所示。使用此配置，导航到 '/parent/10' 将创建主要子组件和 aux 组件。</p><p translation-origin=\"off\">The router merges the parameters, data, and resolve of the componentless\nparent into the parameters, data, and resolve of the children.</p>\n\n<p translation-result=\"on\">当使用空路径字符串定义子组件时，这特别有用，如下例所示。使用此配置，导航到 '/parent/10' 会创建主子组件和 aux 组件。</p><p translation-origin=\"off\">This is especially useful when child components are defined\nwith an empty path string, as in the following example.\nWith this configuration, navigating to '/parent/10' creates\nthe main child and aux components.</p>\n\n<code-example>\n[{\n   path: 'parent/:id',\n   children: [\n     { path: '', component: MainChild },\n     { path: '', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</code-example>\n<h3 id=\"lazy-loading\" translation-result=\"on\">惰性加载<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#lazy-loading\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Lazy Loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/router/Route#lazy-loading\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">给定以下示例路由，路由器将使用浏览器原生导入体系按需惰性加载相关模块。</p><p translation-origin=\"off\">Lazy loading speeds up application load time by splitting the application\ninto multiple bundles and loading them on demand.\nTo use lazy loading, provide the <code>loadChildren</code> property in the <code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code> object,\ninstead of the <code>children</code> property.</p>\n\n<p translation-result=\"on\">对于以下示例路由，路由器将使用浏览器原生导入系统按需惰性加载关联的模块。</p><p translation-origin=\"off\">Given the following example route, the router will lazy load\nthe associated module on demand using the browser native import system.</p>\n\n<code-example>\n[{\n  path: 'lazy',\n  loadChildren: () =&gt; import('./lazy-route/lazy.module').then(mod =&gt; mod.LazyModule),\n}];\n</code-example>\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/core/importProvidersFrom\n - api/router\n - api/router/ActivatedRoute\n - api/router/ActivatedRouteSnapshot\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivate\n - api/router/CanDeactivateFn\n - api/router/CanLoad\n - api/router/CanLoadFn\n - api/router/CanMatch\n - api/router/CanMatchFn\n - api/router/Data\n - api/router/DefaultExport\n - api/router/ExtraOptions\n - api/router/LoadChildrenCallback\n - api/router/NoPreloading\n - api/router/PreloadAllModules\n - api/router/PreloadingStrategy\n - api/router/ROUTES\n - api/router/Resolve\n - api/router/ResolveData\n - api/router/ResolveFn\n - api/router/RouteConfigLoadEnd\n - api/router/RouteConfigLoadStart\n - api/router/Router\n - api/router/RouterConfigOptions\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterOutletContract\n - api/router/Routes\n - api/router/RunGuardsAndResolvers\n - api/router/TitleStrategy\n - api/router/UrlMatcher\n - api/router/defaultUrlMatcher\n - api/router/mapToCanActivate\n - api/router/mapToCanActivateChild\n - api/router/mapToCanDeactivate\n - api/router/mapToCanMatch\n - api/router/mapToResolve\n - api/router/provideRouter\n - api/router/testing/RouterTestingHarness\n - api/router/testing/setupTestingRouter\n - api/router/withComponentInputBinding\n - guide/cheatsheet\n - guide/deprecations\n - guide/route-animations\n - guide/router\n - guide/router-reference\n - guide/router-tutorial\n - guide/router-tutorial-toh\n - guide/standalone-components\n - guide/update-to-version-14\n - tutorial/tour-of-heroes/toh-pt5\n-->\n<!-- links from this doc:\n - /api\n - api/core/EnvironmentInjector\n - api/core/EnvironmentProviders\n - api/core/Injectable\n - api/core/NgModuleRef\n - api/core/Provider\n - api/core/Type\n - api/router\n - api/router/ActivatedRoute\n - api/router/CanActivate\n - api/router/CanActivateChild\n - api/router/CanActivateChildFn\n - api/router/CanActivateFn\n - api/router/CanDeactivate\n - api/router/CanDeactivateFn\n - api/router/CanLoad\n - api/router/CanLoadFn\n - api/router/CanMatch\n - api/router/CanMatchFn\n - api/router/Data\n - api/router/DefaultExport\n - api/router/DeprecatedGuard\n - api/router/LoadChildren\n - api/router/Resolve\n - api/router/ResolveData\n - api/router/ResolveFn\n - api/router/Route#canActivate\n - api/router/Route#canActivateChild\n - api/router/Route#canDeactivate\n - api/router/Route#canLoad\n - api/router/Route#canMatch\n - api/router/Route#children\n - api/router/Route#component\n - api/router/Route#componentless-routes\n - api/router/Route#data\n - api/router/Route#description\n - api/router/Route#empty-path\n - api/router/Route#instance-properties\n - api/router/Route#lazy-loading\n - api/router/Route#loadChildren\n - api/router/Route#loadComponent\n - api/router/Route#matcher\n - api/router/Route#matching-strategy\n - api/router/Route#multiple-outlets\n - api/router/Route#outlet\n - api/router/Route#path\n - api/router/Route#pathMatch\n - api/router/Route#providers\n - api/router/Route#redirectTo\n - api/router/Route#redirects\n - api/router/Route#resolve\n - api/router/Route#route\n - api/router/Route#runGuardsAndResolvers\n - api/router/Route#simple-configuration\n - api/router/Route#title\n - api/router/Route#usage-notes\n - api/router/Route#wild-cards\n - api/router/Route#匹配策略\n - api/router/Route#多重出口\n - api/router/Route#惰性加载\n - api/router/Route#无组件路由\n - api/router/Route#空路径\n - api/router/Route#简单配置\n - api/router/Route#通配符\n - api/router/Route#重定向\n - api/router/Router\n - api/router/RouterOutlet\n - api/router/Routes\n - api/router/RunGuardsAndResolvers\n - api/router/UrlMatcher\n - guide/router\n - https://github.com/ng-docs/angular-cn/edit/cn/packages/router/src/models.ts?message=docs(router)%3A%20请简述你的修改...#L316-L891\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/packages/router/src/models.ts#L316-L891\n-->"}