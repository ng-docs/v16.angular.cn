{"id":"api/core/ng-container","title":"<ng-container>","contents":"<article>\n  <div class=\"breadcrumb-container\">\n    <div class=\"breadcrumb\">\n      <script type=\"application/ld+json\">\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          \"itemListElement\": [\n            { \"@type\": \"ListItem\", \"position\": 1, \"item\": { \"@id\": \"https://angular.cn/api\", \"name\": \"API\" } },\n            { \"@type\": \"ListItem\", \"position\": 2, \"item\": { \"@id\": \"https://angular.cn/api/core\", \"name\": \"@angular/core\" } },\n            { \"@type\": \"ListItem\", \"position\": 3, \"item\": { \"@id\": \"https://angular.cn/api/core/ng-container\", \"name\": \"<ng-container>\" } }\n          ]\n        }\n      </script>\n        <a href=\"/api\">API</a> &gt; <a href=\"api/core\">@angular/core</a>\n    </div>\n    <div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/special-elements/core/ng-container.md?message=docs(core)%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  <a href=\"https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/aio/content/special-elements/core/ng-container.md\" aria-label=\"查看源码\" title=\"查看源码\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">code</i></a>\n</div>\n  </div>\n  <header ng-should-translate=\"\" class=\"api-header\">\n    <h1 id=\"ng-container\">&lt;ng-container&gt;<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#ng-container\"><i class=\"material-icons\">link</i></a></h1>\n    <label class=\"api-type-label element\">element</label>\n  </header>\n  <aio-toc class=\"embedded\"></aio-toc>\n\n  <div class=\"api-body\">\n  <section ng-should-translate=\"\" class=\"short-description\">\n    <p translation-result=\"on\">一种特殊元素，可以在不向 DOM 添加新元素的情况下承载结构型指令。</p><p translation-origin=\"off\">A special element that can hold structural directives without adding new elements to the DOM.</p>\n\n\n    <p no-translate=\"\"><a href=\"api/core/ng-container#description\">查看\"说明\"...</a></p>\n  </section>\n\n\n\n<section ng-should-translate=\"\" class=\"description\">\n  <h2 id=\"description\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#description\"><i class=\"material-icons\">link</i></a></h2>\n  <p translation-result=\"on\"><code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 允许我们在没有任何额外元素的情况下使用结构型指令，确保对应用 DOM 的唯一更改就是由指令本身决定的。</p><p translation-origin=\"off\">The <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> allows us to use structural directives without any extra element, making sure that the only DOM changes being applied are those dictated by the directives themselves.</p>\n\n<p translation-result=\"on\">这不仅提高了性能（即使是轻微的），因为浏览器最终渲染的元素更少，而且你能得到更干净的 DOM 和样式。</p><p translation-origin=\"off\">This not only increases performance (even so slightly) since the browser ends up rendering less elements but can also be a valuable asset in having cleaner DOMs and styles alike.</p>\n\n<p translation-result=\"on\">例如，它能让我们使用结构型指令，而不会破坏依赖于精确 DOM 结构的样式（例如，我们在使用 flex 容器、边距、子组合器选择器等时需要的样式）。</p><p translation-origin=\"off\">It can for example enable us to use structural directives without breaking styling dependent on a precise DOM structure (as for example the ones we get when using flex containers, margins, the child combinator selector, etc.).</p>\n\n  <p>Further information is available in the <a href=\"api/core/ng-container#usage-notes\">Usage Notes...</a></p>\n</section>\n\n<section ng-should-translate=\"\" class=\"usage-notes\">\n  <h2 id=\"usage-notes\">使用说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#usage-notes\"><i class=\"material-icons\">link</i></a></h2>\n  <h3 id=\"with-ngifs\" translation-result=\"on\">与 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 等一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#与-ngif-等一起使用\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">With <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>s<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#with-ngifs\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 的一个常见用例是与结构型指令 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 一起使用。通过使用这种特殊元素，我们可以生成非常干净、易于理解和使用的模板。</p><p translation-origin=\"off\">One common use case of <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> is alongside the <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> structural directive. By using the special element we can produce very clean templates easy to understand and work with.</p>\n\n<p translation-result=\"on\">例如，我们可能希望根据条件显示多个元素，但它们不需要都位于同一个根元素下。这可以通过将它们包装在这样一个块中来轻松实现：</p><p translation-origin=\"off\">For example, we may want to have a number of elements shown conditionally but they do not need to be all under the same root element. That can be easily done by wrapping them in such a block:</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition\"&gt;\n  …\n&lt;/ng-container&gt;\n\n</code-example>\n<p translation-result=\"on\">这也可以通过 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 旁边的 <code>else</code> 语句进行扩充，如下所示：</p><p translation-origin=\"off\">This can also be augmented with an <code>else</code> statement alongside an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> as:</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;ng-container *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"condition; else templateA\"&gt;\n  …\n&lt;/ng-container&gt;\n&lt;ng-template #templateA&gt;\n  …\n&lt;/ng-template&gt;\n\n</code-example>\n<h3 id=\"combination-of-multiple-structural-directives\" translation-result=\"on\">组合使用多个结构型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#combination-of-multiple-structural-directives\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Combination of multiple structural directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#combination-of-multiple-structural-directives\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">不能在同一个元素上使用多个结构型指令；如果你需要利用多个结构型指令，建议为每个结构型指令分别使用一个 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 。</p><p translation-origin=\"off\">Multiple structural directives cannot be used on the same element; if you need to take advantage of more than one structural directive, it is advised to use an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> per structural directive.</p>\n\n<p translation-result=\"on\">最常见的情况是使用 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>。例如，假设我们有一个条目列表，但只有在特定条件为真时才需要显示每个条目。我们可能会想这么做：</p><p translation-origin=\"off\">The most common scenario is with <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a></code>. For example, let's imagine that we have a list of items but each item needs to be displayed only if a certain condition is true. We could be tempted to try something like:</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;ul&gt;\n  &lt;li *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"item.isValid\"&gt;\n    {{ item.name }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\">正如我们所说的，这行不通，我们可以做的就是简单地将结构型指令之一移动到 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素，然后用它包裹另一个，如下所示：</p><p translation-origin=\"off\">As we said that would not work, what we can do is to simply move one of the structural directives to an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> element, which would then wrap the other one, like so:</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;ul&gt;\n  &lt;ng-container *<a href=\"api/common/NgFor\" class=\"code-anchor\">ngFor</a>=\"let item of items\"&gt;\n    &lt;li *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"item.isValid\"&gt;\n      {{ item.name }}\n    &lt;/li&gt;\n  &lt;/ng-container&gt;\n&lt;/ul&gt;\n\n</code-example>\n<p translation-result=\"on\">这会如预期般工作，但不会在 DOM 中引入任何新的不必要的元素。</p><p translation-origin=\"off\">This would work as intended without introducing any new unnecessary elements in the DOM.</p>\n\n<p translation-result=\"on\">有关更多信息，参阅<a href=\"guide/structural-directives#one-per-element\">每个元素只能有一个结构型指令</a>。</p><p translation-origin=\"off\">For more information see <a href=\"guide/structural-directives#one-per-element\">one structural directive per element</a>.</p>\n\n<h3 id=\"use-alongside-ngtemplateoutlet\" translation-result=\"on\">与 ngTemplateOutlet 一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#use-alongside-ngtemplateoutlet\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\">Use alongside ngTemplateOutlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ng-container#use-alongside-ngtemplateoutlet\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"><code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code> 指令可以应用于任何元素，但大多数时候它都会应用在 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 元素上。通过将两者结合起来，我们得到了一个非常清晰且易于遵循的 HTML 和 DOM 结构，其中不需要额外的元素，并且模板视图在被用到时才会实例化。</p><p translation-origin=\"off\">The <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code> directive can be applied to any element but most of the time it's applied to <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> ones. By combining the two, we get a very clear and easy to follow HTML and DOM structure in which no extra elements are necessary and template views are instantiated where requested.</p>\n\n<p translation-result=\"on\">例如，想象一下我们有一个很大的 HTML，其中一小部分需要在不同的地方重复。一个简单的解决方案是定义一个包含我们要重复的 HTML 的 <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> 并在必要时通过使用 <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> 和 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code> 来渲染它。</p><p translation-origin=\"off\">For example, imagine a situation in which we have a large HTML, in which a small portion needs to be repeated in different places. A simple solution is to define an <code><a href=\"api/core/ng-template\" class=\"code-anchor\">&lt;ng-template&gt;</a></code> containing our repeating HTML and render that where necessary by using <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&lt;ng-container&gt;</a></code> alongside an <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code>.</p>\n\n<p translation-result=\"on\">像这样：</p><p translation-origin=\"off\">Like so:</p>\n\n<code-example format=\"html\" language=\"html\">\n\n&lt;!-- … --&gt;\n\n&lt;ng-container *<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>=\"tmpl; context: {$implicit: 'Hello'}\"&gt;\n&lt;/ng-container&gt;\n\n&lt;!-- … --&gt;\n\n&lt;ng-container *<a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">ngTemplateOutlet</a>=\"tmpl; context: {$implicit: 'World'}\"&gt;\n&lt;/ng-container&gt;\n\n&lt;!-- … --&gt;\n\n&lt;ng-template #tmpl let-text&gt;\n  &lt;h1&gt;{{ text }}&lt;/h1&gt;\n&lt;/ng-template&gt;\n\n</code-example>\n<p translation-result=\"on\">有关 <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code> 的更多信息，请参阅 <a href=\"api/common/NgTemplateOutlet\"><code>NgTemplateOutlet</code> 的 API 文档页面</a>。</p><p translation-origin=\"off\">For more information regarding <code><a href=\"api/common/NgTemplateOutlet\" class=\"code-anchor\">NgTemplateOutlet</a></code>, see the <a href=\"api/common/NgTemplateOutlet\"><code>NgTemplateOutlet</code>s api documentation page</a>.</p>\n\n\n</section></div>\n</article>\n\n<!-- links to this doc:\n - api/core\n - guide/built-in-directives\n - guide/content-projection\n - guide/i18n-common-prepare\n - guide/structural-directives\n-->\n<!-- links from this doc:\n - /api\n - api/common/NgFor\n - api/common/NgIf\n - api/common/NgTemplateOutlet\n - api/core\n - api/core/ng-container#combination-of-multiple-structural-directives\n - api/core/ng-container#description\n - api/core/ng-container#ng-container\n - api/core/ng-container#usage-notes\n - api/core/ng-container#use-alongside-ngtemplateoutlet\n - api/core/ng-container#with-ngifs\n - api/core/ng-container#与-ngif-等一起使用\n - api/core/ng-container#与-ngtemplateoutlet-一起使用\n - api/core/ng-container#组合使用多个结构型指令\n - api/core/ng-template\n - guide/structural-directives#one-per-element\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/special-elements/core/ng-container.md?message=docs(core)%3A%20请简述你的修改...\n - https://github.com/ng-docs/angular-cn/tree/16.1.0-next.3/aio/content/special-elements/core/ng-container.md\n-->"}