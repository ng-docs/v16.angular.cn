{"id":"errors/NG0500","title":"NG0500: During hydration, Angular expected a DOM node, but either the actual DOM was different or was not found.\n\n在水合（hydration，Angular 的服务端渲染技术）期间，Angular 期望一个 DOM 节点，但实际的 DOM 节点要么与此不同，要么没有找到。","contents":"<div class=\"github-links\">\n  <a href=\"https://github.com/ng-docs/angular-cn/edit/cn/aio/content/errors/NG0500.md?message=docs(...)%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n<div class=\"content\">\n\n  <h1 id=\"ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found在水合hydrationangular-的服务端渲染技术期间angular-期望一个-dom-节点但实际的-dom-节点要么与此不同要么没有找到\">NG0500: During hydration, Angular expected a DOM node, but either the actual DOM was different or was not found.\n\n在水合（hydration，Angular 的服务端渲染技术）期间，Angular 期望一个 DOM 节点，但实际的 DOM 节点要么与此不同，要么没有找到。<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found在水合hydrationangular-的服务端渲染技术期间angular-期望一个-dom-节点但实际的-dom-节点要么与此不同要么没有找到\"><i class=\"material-icons\">link</i></a></h1>\n\n  \n  \n\n  <div class=\"error-description\">\n    <h2 translation-result=\"on\" id=\"说明\">说明<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#说明\"><i class=\"material-icons\">link</i></a></h2>\n    <h2 translation-origin=\"off\" id=\"description\">Description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#description\"><i class=\"material-icons\">link</i></a></h2>\n    <p translation-result=\"on\">这个错误意味着在水合过程中，Angular 期望 DOM 结构在服务端渲染期间渲染并加上注释节点。但是，在客户端，DOM 树与服务端渲染出的 DOM 树不同。</p><p translation-origin=\"off\">This error means that during the hydration process, Angular expected a DOM structure as rendered and annotated during server side rendering. However, on the client, the DOM tree was different than the server rendered DOM tree.</p>\n\n<p translation-result=\"on\">此错误通常是由于使用原生浏览器 API 直接操作 DOM 而发生的，这些 API 在 Angular 生成的内容之外更改了 DOM 结构。你可以通过重构组件以使用原生 Angular API 而不是原生 DOM API 来解决此问题。如果那做不到，你可以将 <code>ngSkipHydration</code> 属性添加到组件的宿主节点，这将禁用组件及其子组件的水合。<code>ngSkipHydration</code> 只能作为最后的手段使用，并且应该视为某种需要修复的错误。</p><p translation-origin=\"off\">This error typically happens due to direct DOM manipulation using native browser APIs that alter the DOM structure outside of what Angular produced. You can resolve this by refactoring the component to use native Angular APIs instead of native APIs. If that's not possible, you can add the <code>ngSkipHydration</code> attribute to your component's host node, which will disable hydration for the component and its children. <code>ngSkipHydration</code> should only be used as a last resort and should be considered a bug that needs to be fixed.</p>\n\n<p translation-result=\"on\">有关水合的更多信息，请参阅<a href=\"guide/hydration\">本指南</a>。</p><p translation-origin=\"off\">More information about hydration can be found in <a href=\"guide/hydration\">this guide</a>.</p>\n\n<p translation-result=\"on\">以下示例将触发错误。</p><p translation-origin=\"off\">The following example will trigger the error.</p>\n\n<code-example language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  standalone: true,\n  selector: 'example-cmp',\n  template: '&lt;div&gt;&lt;span&gt;world&lt;/span&gt;&lt;/div&gt;',\n})\nexport class ExampleCmp {\n  hostElement = inject(<a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>).nativeElement;\n\n  ngOnInit() {\n    // Create a new &lt;p&gt; element with the `Hello` text inside\n    const newNode = document.createElement('p');\n    newNode.innerHTML = 'Hello';\n\n    // Insert the &lt;p&gt; before the first element. Since Angular has no information\n    // about the &lt;p&gt; element, it will be looking for the &lt;div&gt; element at the first\n    // element position instead. As a result, a hydration mismatch error would be\n    // thrown. Instead, update component's template to create the &lt;p&gt; element.\n    this.hostElement.insertBefore(newNode, this.hostElement.firstChild);\n  }\n}\n</code-example>\n\n  </div>\n\n\n  \n  <br>\n\n  <div class=\"debugging\">\n    <h2 translation-result=\"on\" id=\"如何排除本错误\">如何排除本错误<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#如何排除本错误\"><i class=\"material-icons\">link</i></a></h2>\n    <h2 translation-origin=\"off\" id=\"debugging-the-error\">Debugging the error<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"errors/NG0500#debugging-the-error\"><i class=\"material-icons\">link</i></a></h2>\n    <p translation-result=\"on\">开发人员控制台中的错误消息会包含关于导致问题的应用程序 DOM 结构的特定部位的信息。检查应用程序的相应部位是否存在与水合相关的错误，例如使用原生 API 的直接 DOM 操作。检查你的模板是否具有有效的 HTML 结构。请参阅<a href=\"guide/hydration#valid-html-structure\">水合指南</a>中的更多信息。可能的解决方案之一是，你可以将 <code>ngSkipHydration</code> 属性添加到组件中的原生节点。</p><p translation-origin=\"off\">The error message in the developer console should contain information on a specific part of the application's DOM structure that is causing the problem. Review that part of the application for hydration-related errors, such as direct DOM manipulation using native APIs.\nCheck that your template has valid HTML structure. See more information in the <a href=\"guide/hydration#valid-html-structure\">hydration guide</a>.\nYou can add the <code>ngSkipHydration</code> attribute to your component host node as a possible workaround.</p>\n\n<p translation-result=\"on\">如果你的应用程序在开发环境中运行，但你在生产构建中看到水合错误，请确保所生成的发给浏览器的 HTML 包含 Angular 在服务端渲染期间生成的注释节点。Angular 运行时使用这些注释节点作为视图容器的锚点（无论是否水合），而水合过程会期望它们出现在原始位置。如果你有某种自定义逻辑会从服务端渲染生成的 HTML 中删除注释节点，或者你已将 CDN 配置为在提供内容之前删除它们 - 禁用删除注释节点的特性并检查水合错误是否消失了。</p><p translation-origin=\"off\">If your application works in development environment, but you see hydration errors in production builds, make sure that the generated HTML that is delivered to a browser contains comment nodes produced by Angular during the rendering on the server. Those comment nodes are used by Angular runtime as anchors for view containers (with and without hydration) and hydration process expects them to be present at their original locations. If you have a custom logic to remove comment nodes from the HTML generated by the server-side rendering or you've configured your CDN to remove them before serving the content - disable the comment nodes removal and check if hydration errors are gone.</p>\n\n\n  </div>\n  \n</div>\n\n<!-- links to this doc:\n - errors\n - errors/NG0501\n - errors/NG0502\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/ElementRef\n - errors/NG0500#debugging-the-error\n - errors/NG0500#description\n - errors/NG0500#ng0500-during-hydration-angular-expected-a-dom-node-but-either-the-actual-dom-was-different-or-was-not-found在水合hydrationangular-的服务端渲染技术期间angular-期望一个-dom-节点但实际的-dom-节点要么与此不同要么没有找到\n - errors/NG0500#如何排除本错误\n - errors/NG0500#说明\n - guide/hydration\n - guide/hydration#valid-html-structure\n - https://github.com/ng-docs/angular-cn/edit/cn/aio/content/errors/NG0500.md?message=docs(...)%3A%20请简述你的修改...\n-->"}